{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchChatUserRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchChatUserConversationRequest),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(fetchChatUser),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(fetchChatUserConversation),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{database}from'../firebase/firebase';import{FETCH_ALL_CHAT_USER,FETCH_ALL_CHAT_USER_CONVERSATION}from'constants/ActionTypes';import{fetchChatUserConversationSuccess,fetchChatUserSuccess,showChatMessage}from'actions/Chat';var getChatUsers=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return database.ref('prod/chat/users').once('value').then(function(snapshot){var chatUsers=[];snapshot.forEach(function(rawData){chatUsers.push(rawData.val());});return chatUsers;}).catch(function(error){return error;});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getChatUsers(){return _ref.apply(this,arguments);};}();var getUsersConversation=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return database.ref('prod/chat/conversation').once('value').then(function(snapshot){var conversations=[];snapshot.forEach(function(rawData){var conversation=rawData.val();// change object to array\nvar conversationDatas=[];if(conversation.conversationData){conversation.conversationData.forEach(function(conversationData){return conversationDatas.push(conversationData);});}conversation.conversationData=conversationDatas;conversations.push(conversation);});return conversations;}).catch(function(error){return error;});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function getUsersConversation(){return _ref2.apply(this,arguments);};}();function fetchChatUserRequest(){var fetchedTodo;return _regeneratorRuntime.wrap(function fetchChatUserRequest$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return call(getChatUsers);case 3:fetchedTodo=_context3.sent;_context3.next=6;return put(fetchChatUserSuccess(fetchedTodo));case 6:_context3.next=12;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);_context3.next=12;return put(showChatMessage(_context3.t0));case 12:case\"end\":return _context3.stop();}}},_marked,null,[[0,8]]);}function fetchChatUserConversationRequest(){var fetchedTodoConversation;return _regeneratorRuntime.wrap(function fetchChatUserConversationRequest$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return call(getUsersConversation);case 3:fetchedTodoConversation=_context4.sent;_context4.next=6;return put(fetchChatUserConversationSuccess(fetchedTodoConversation));case 6:_context4.next=12;break;case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](0);_context4.next=12;return put(showChatMessage(_context4.t0));case 12:case\"end\":return _context4.stop();}}},_marked2,null,[[0,8]]);}export function fetchChatUser(){return _regeneratorRuntime.wrap(function fetchChatUser$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return takeEvery(FETCH_ALL_CHAT_USER,fetchChatUserRequest);case 2:case\"end\":return _context5.stop();}}},_marked3);}export function fetchChatUserConversation(){return _regeneratorRuntime.wrap(function fetchChatUserConversation$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION,fetchChatUserConversationRequest);case 2:case\"end\":return _context6.stop();}}},_marked4);}export default function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return all([fork(fetchChatUserConversation),fork(fetchChatUser)]);case 2:case\"end\":return _context7.stop();}}},_marked5);}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Chat.js"],"names":["fetchChatUserRequest","fetchChatUserConversationRequest","fetchChatUser","fetchChatUserConversation","rootSaga","all","call","fork","put","takeEvery","database","FETCH_ALL_CHAT_USER","FETCH_ALL_CHAT_USER_CONVERSATION","fetchChatUserConversationSuccess","fetchChatUserSuccess","showChatMessage","getChatUsers","ref","once","then","snapshot","chatUsers","forEach","rawData","push","val","catch","error","getUsersConversation","conversations","conversation","conversationDatas","conversationData","fetchedTodo","fetchedTodoConversation"],"mappings":"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","sourcesContent":["import {all, call, fork, put, takeEvery} from 'redux-saga/effects';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_CHAT_USER, FETCH_ALL_CHAT_USER_CONVERSATION} from 'constants/ActionTypes';\nimport {fetchChatUserConversationSuccess, fetchChatUserSuccess, showChatMessage} from 'actions/Chat';\n\nconst getChatUsers = async () =>\n  await database.ref('prod/chat/users').once('value')\n    .then((snapshot) => {\n      const chatUsers = [];\n      snapshot.forEach((rawData) => {\n        chatUsers.push(rawData.val());\n      });\n      return chatUsers;\n    })\n    .catch(error => error);\n\nconst getUsersConversation = async () =>\n  await database.ref('prod/chat/conversation').once('value')\n    .then((snapshot) => {\n      const conversations = [];\n      snapshot.forEach((rawData) => {\n        const conversation = rawData.val();\n\n        // change object to array\n        const conversationDatas = [];\n        if (conversation.conversationData) {\n          conversation.conversationData.forEach((conversationData) =>\n            conversationDatas.push(conversationData)\n          );\n        }\n        conversation.conversationData = conversationDatas;\n        conversations.push(conversation);\n      });\n\n      return conversations;\n    })\n    .catch(error => error);\n\n\nfunction* fetchChatUserRequest() {\n  try {\n    const fetchedTodo = yield call(getChatUsers);\n    yield put(fetchChatUserSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nfunction* fetchChatUserConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getUsersConversation);\n    yield put(fetchChatUserConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nexport function* fetchChatUser() {\n  yield takeEvery(FETCH_ALL_CHAT_USER, fetchChatUserRequest);\n}\n\nexport function* fetchChatUserConversation() {\n  yield takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION, fetchChatUserConversationRequest);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(fetchChatUserConversation), fork(fetchChatUser)]);\n}"]},"metadata":{},"sourceType":"module"}