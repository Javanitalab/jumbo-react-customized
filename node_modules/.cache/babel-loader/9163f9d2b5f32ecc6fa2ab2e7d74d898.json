{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)'\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)'\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffset);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffset * 1.5);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700]\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700]\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700]\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700]\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    },\n    type = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"type\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    if (!background) {\n      throw new TypeError(`Material-UI: missing background argument in getContrastText(${background}).`);\n    }\n\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`Material-UI: the contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  function augmentColor(color, mainShade = 500, lightShade = 300, darkShade = 700) {\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!color.main) {\n        throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', `The color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.`].join('\\n'));\n      }\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  }\n\n  const types = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(`Material-UI: the palette type \\`${type}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette type, can be light or dark.\n    type,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, types[type]), other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@material-ui/core/es/styles/createPalette.js"],"names":["_extends","_objectWithoutPropertiesLoose","deepmerge","common","grey","indigo","pink","red","orange","blue","green","darken","getContrastRatio","lighten","light","text","primary","secondary","disabled","hint","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","hasOwnProperty","main","createPalette","palette","A200","A400","A700","error","warning","info","success","type","contrastThreshold","other","getContrastText","TypeError","contrastText","process","env","NODE_ENV","contrast","console","join","augmentColor","color","mainShade","lightShade","darkShade","Error","types","paletteOutput"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)'\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)'\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffset);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffset * 1.5);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700]\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700]\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700]\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700]\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    },\n    type = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"type\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    if (!background) {\n      throw new TypeError(`Material-UI: missing background argument in getContrastText(${background}).`);\n    }\n\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`Material-UI: the contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  function augmentColor(color, mainShade = 500, lightShade = 300, darkShade = 700) {\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!color.main) {\n        throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', `The color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.`].join('\\n'));\n      }\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  }\n\n  const types = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(`Material-UI: the palette type \\`${type}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette type, can be light or dark.\n    type,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, types[type]), other);\n  return paletteOutput;\n}"]},"metadata":{},"sourceType":"module"}