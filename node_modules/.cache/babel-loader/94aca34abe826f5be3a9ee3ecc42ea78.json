{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/progressbar/linear/buffer/LinearBuffer.js\";\nimport React, { Component } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nclass LinearBuffer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      completed: 0,\n      buffer: 10\n    };\n\n    this.progress = () => {\n      const {\n        completed\n      } = this.state;\n\n      if (completed > 100) {\n        this.setState({\n          completed: 0,\n          buffer: 10\n        });\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        this.setState({\n          completed: completed + diff,\n          buffer: completed + diff + diff2\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 500);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const {\n      completed,\n      buffer\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(LinearProgress, {\n      mode: \"buffer\",\n      value: completed,\n      valueBuffer: buffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(LinearProgress, {\n      color: \"secondary\",\n      mode: \"buffer\",\n      value: completed,\n      valueBuffer: buffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LinearBuffer;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/progressbar/linear/buffer/LinearBuffer.js"],"names":["React","Component","LinearProgress","LinearBuffer","state","completed","buffer","progress","setState","diff","Math","random","diff2","componentDidMount","timer","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AAEA,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEnCG,KAFmC,GAE3B;AACNC,MAAAA,SAAS,EAAE,CADL;AAENC,MAAAA,MAAM,EAAE;AAFF,KAF2B;;AAAA,SAMnCC,QANmC,GAMxB,MAAM;AACf,YAAM;AAACF,QAAAA;AAAD,UAAc,KAAKD,KAAzB;;AACA,UAAIC,SAAS,GAAG,GAAhB,EAAqB;AACnB,aAAKG,QAAL,CAAc;AAACH,UAAAA,SAAS,EAAE,CAAZ;AAAeC,UAAAA,MAAM,EAAE;AAAvB,SAAd;AACD,OAFD,MAEO;AACL,cAAMG,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,cAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAA9B;AACA,aAAKH,QAAL,CAAc;AAACH,UAAAA,SAAS,EAAEA,SAAS,GAAGI,IAAxB;AAA8BH,UAAAA,MAAM,EAAED,SAAS,GAAGI,IAAZ,GAAmBG;AAAzD,SAAd;AACD;AACF,KAfkC;AAAA;;AAiBnCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,GAAaC,WAAW,CAAC,KAAKR,QAAN,EAAgB,GAAhB,CAAxB;AACD;;AAEDS,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKH,KAAN,CAAb;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAACb,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAsB,KAAKF,KAAjC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAC,QAArB;AAA8B,MAAA,KAAK,EAAEC,SAArC;AAAgD,MAAA,WAAW,EAAEC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAC,WAAtB;AAAkC,MAAA,IAAI,EAAC,QAAvC;AAAgD,MAAA,KAAK,EAAED,SAAvD;AAAkE,MAAA,WAAW,EAAEC,MAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAlCkC;;AAqCrC,eAAeH,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nclass LinearBuffer extends Component {\n  timer;\n  state = {\n    completed: 0,\n    buffer: 10,\n  };\n  progress = () => {\n    const {completed} = this.state;\n    if (completed > 100) {\n      this.setState({completed: 0, buffer: 10});\n    } else {\n      const diff = Math.random() * 10;\n      const diff2 = Math.random() * 10;\n      this.setState({completed: completed + diff, buffer: completed + diff + diff2});\n    }\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 500);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const {completed, buffer} = this.state;\n    return (\n      <div>\n        <LinearProgress mode=\"buffer\" value={completed} valueBuffer={buffer}/>\n        <br/>\n        <LinearProgress color=\"secondary\" mode=\"buffer\" value={completed} valueBuffer={buffer}/>\n      </div>\n    );\n  }\n}\n\nexport default LinearBuffer;"]},"metadata":{},"sourceType":"module"}