{"ast":null,"code":"import _classCallCheck from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import LinearProgress from'@material-ui/core/LinearProgress';var LinearBuffer=/*#__PURE__*/function(_Component){_inherits(LinearBuffer,_Component);function LinearBuffer(){var _getPrototypeOf2;var _this;_classCallCheck(this,LinearBuffer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(LinearBuffer)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={completed:0,buffer:10};_this.progress=function(){var completed=_this.state.completed;if(completed>100){_this.setState({completed:0,buffer:10});}else{var diff=Math.random()*10;var diff2=Math.random()*10;_this.setState({completed:completed+diff,buffer:completed+diff+diff2});}};return _this;}_createClass(LinearBuffer,[{key:\"componentDidMount\",value:function componentDidMount(){this.timer=setInterval(this.progress,500);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.timer);}},{key:\"render\",value:function render(){var _this$state=this.state,completed=_this$state.completed,buffer=_this$state.buffer;return React.createElement(\"div\",null,React.createElement(LinearProgress,{mode:\"buffer\",value:completed,valueBuffer:buffer}),React.createElement(\"br\",null),React.createElement(LinearProgress,{color:\"secondary\",mode:\"buffer\",value:completed,valueBuffer:buffer}));}}]);return LinearBuffer;}(Component);export default LinearBuffer;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/progressbar/linear/buffer/LinearBuffer.js"],"names":["React","Component","LinearProgress","LinearBuffer","state","completed","buffer","progress","setState","diff","Math","random","diff2","timer","setInterval","clearInterval"],"mappings":"2rBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kCAA3B,C,GAEMC,CAAAA,Y,uZAEJC,K,CAAQ,CACNC,SAAS,CAAE,CADL,CAENC,MAAM,CAAE,EAFF,C,OAIRC,Q,CAAW,UAAM,IACRF,CAAAA,SADQ,CACK,MAAKD,KADV,CACRC,SADQ,CAEf,GAAIA,SAAS,CAAG,GAAhB,CAAqB,CACnB,MAAKG,QAAL,CAAc,CAACH,SAAS,CAAE,CAAZ,CAAeC,MAAM,CAAE,EAAvB,CAAd,EACD,CAFD,IAEO,CACL,GAAMG,CAAAA,IAAI,CAAGC,IAAI,CAACC,MAAL,GAAgB,EAA7B,CACA,GAAMC,CAAAA,KAAK,CAAGF,IAAI,CAACC,MAAL,GAAgB,EAA9B,CACA,MAAKH,QAAL,CAAc,CAACH,SAAS,CAAEA,SAAS,CAAGI,IAAxB,CAA8BH,MAAM,CAAED,SAAS,CAAGI,IAAZ,CAAmBG,KAAzD,CAAd,EACD,CACF,C,qGAEmB,CAClB,KAAKC,KAAL,CAAaC,WAAW,CAAC,KAAKP,QAAN,CAAgB,GAAhB,CAAxB,CACD,C,mEAEsB,CACrBQ,aAAa,CAAC,KAAKF,KAAN,CAAb,CACD,C,uCAEQ,iBACqB,KAAKT,KAD1B,CACAC,SADA,aACAA,SADA,CACWC,MADX,aACWA,MADX,CAEP,MACE,gCACE,oBAAC,cAAD,EAAgB,IAAI,CAAC,QAArB,CAA8B,KAAK,CAAED,SAArC,CAAgD,WAAW,CAAEC,MAA7D,EADF,CAEE,8BAFF,CAGE,oBAAC,cAAD,EAAgB,KAAK,CAAC,WAAtB,CAAkC,IAAI,CAAC,QAAvC,CAAgD,KAAK,CAAED,SAAvD,CAAkE,WAAW,CAAEC,MAA/E,EAHF,CADF,CAOD,C,0BAlCwBL,S,EAqC3B,cAAeE,CAAAA,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nclass LinearBuffer extends Component {\n  timer;\n  state = {\n    completed: 0,\n    buffer: 10,\n  };\n  progress = () => {\n    const {completed} = this.state;\n    if (completed > 100) {\n      this.setState({completed: 0, buffer: 10});\n    } else {\n      const diff = Math.random() * 10;\n      const diff2 = Math.random() * 10;\n      this.setState({completed: completed + diff, buffer: completed + diff + diff2});\n    }\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 500);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const {completed, buffer} = this.state;\n    return (\n      <div>\n        <LinearProgress mode=\"buffer\" value={completed} valueBuffer={buffer}/>\n        <br/>\n        <LinearProgress color=\"secondary\" mode=\"buffer\" value={completed} valueBuffer={buffer}/>\n      </div>\n    );\n  }\n}\n\nexport default LinearBuffer;"]},"metadata":{},"sourceType":"module"}