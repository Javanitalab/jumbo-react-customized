{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchContactRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{all,call,put,takeEvery}from'redux-saga/effects';import{fetchContactsSuccess,showContactMessage}from'actions/Contact';import{database}from'../firebase/firebase';import{FETCH_ALL_CONTACT}from'constants/ActionTypes';var getContacts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return database.ref('prod/contacts').once('value').then(function(snapshot){var contacts=[];snapshot.forEach(function(rawData){contacts.push(rawData.val());});return contacts;}).catch(function(error){return error;});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getContacts(){return _ref.apply(this,arguments);};}();function fetchContactRequest(){var fetchedContact;return _regeneratorRuntime.wrap(function fetchContactRequest$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(getContacts);case 3:fetchedContact=_context2.sent;_context2.next=6;return put(fetchContactsSuccess(fetchedContact));case 6:_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);_context2.next=12;return put(showContactMessage(_context2.t0));case 12:case\"end\":return _context2.stop();}}},_marked,null,[[0,8]]);}export default function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([takeEvery(FETCH_ALL_CONTACT,fetchContactRequest)]);case 2:case\"end\":return _context3.stop();}}},_marked2);}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Contact.js"],"names":["fetchContactRequest","rootSaga","all","call","put","takeEvery","fetchContactsSuccess","showContactMessage","database","FETCH_ALL_CONTACT","getContacts","ref","once","then","snapshot","contacts","forEach","rawData","push","val","catch","error","fetchedContact"],"mappings":"iUAiBUA,mB,iDAUeC,Q,EA3BzB,OAAQC,GAAR,CAAaC,IAAb,CAAmBC,GAAnB,CAAwBC,SAAxB,KAAwC,oBAAxC,CACA,OAAQC,oBAAR,CAA8BC,kBAA9B,KAAuD,iBAAvD,CACA,OAAQC,QAAR,KAAuB,sBAAvB,CACA,OAAQC,iBAAR,KAAgC,uBAAhC,CAEA,GAAMC,CAAAA,WAAW,0FAAG,yJACZF,CAAAA,QAAQ,CAACG,GAAT,CAAa,eAAb,EAA8BC,IAA9B,CAAmC,OAAnC,EACHC,IADG,CACE,SAACC,QAAD,CAAc,CAClB,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5BF,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACE,GAAR,EAAd,EACD,CAFD,EAGA,MAAOJ,CAAAA,QAAP,CACD,CAPG,EAQHK,KARG,CAQG,SAAAC,KAAK,QAAIA,CAAAA,KAAJ,EARR,CADY,6GAAH,kBAAXX,CAAAA,WAAW,0CAAjB,CAYA,QAAUV,CAAAA,mBAAV,uLAE2B,MAAMG,CAAAA,IAAI,CAACO,WAAD,CAAV,CAF3B,OAEUY,cAFV,iCAGI,MAAMlB,CAAAA,GAAG,CAACE,oBAAoB,CAACgB,cAAD,CAArB,CAAT,CAHJ,4GAKI,MAAMlB,CAAAA,GAAG,CAACG,kBAAkB,cAAnB,CAAT,CALJ,qEAUA,cAAe,SAAUN,CAAAA,QAAV,wIACb,MAAMC,CAAAA,GAAG,CAAC,CAACG,SAAS,CAACI,iBAAD,CAAoBT,mBAApB,CAAV,CAAD,CAAT,CADa","sourcesContent":["import {all, call, put, takeEvery} from 'redux-saga/effects';\nimport {fetchContactsSuccess, showContactMessage} from 'actions/Contact';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_CONTACT} from 'constants/ActionTypes';\n\nconst getContacts = async () =>\n  await database.ref('prod/contacts').once('value')\n    .then((snapshot) => {\n      const contacts = [];\n      snapshot.forEach((rawData) => {\n        contacts.push(rawData.val());\n      });\n      return contacts;\n    })\n    .catch(error => error);\n\n\nfunction* fetchContactRequest() {\n  try {\n    const fetchedContact = yield call(getContacts);\n    yield put(fetchContactsSuccess(fetchedContact));\n  } catch (error) {\n    yield put(showContactMessage(error));\n  }\n}\n\n\nexport default function* rootSaga() {\n  yield all([takeEvery(FETCH_ALL_CONTACT, fetchContactRequest)]);\n}"]},"metadata":{},"sourceType":"module"}