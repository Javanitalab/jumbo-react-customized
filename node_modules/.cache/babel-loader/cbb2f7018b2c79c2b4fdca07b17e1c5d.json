{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/map/routes/mapOverlay/Components/MapOverlay.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, OverlayView, withGoogleMap } from 'react-google-maps';\nconst STYLES = {\n  mapContainer: {\n    height: 500\n  },\n  overlayView: {\n    background: '#fff',\n    border: '1px solid #ccc',\n    padding: 15\n  }\n};\n\nfunction getPixelPositionOffset(width, height) {\n  return {\n    x: -(width / 2),\n    y: -(height / 2)\n  };\n}\n\nconst OverlayViewExampleGoogleMap = withGoogleMap(props => React.createElement(GoogleMap, {\n  defaultZoom: 15,\n  defaultCenter: {\n    lat: 47.646935,\n    lng: -122.303763\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(OverlayView, {\n  position: {\n    lat: 47.646935,\n    lng: -122.303763\n  }\n  /*\n   * An alternative to specifying position is specifying bounds.\n   * bounds can either be an instance of google.maps.LatLngBounds\n   * or an object in the following format:\n   * bounds={{\n   *    ne: { lat: 62.400471, lng: -150.005608 },\n   *    sw: { lat: 62.281819, lng: -150.287132 }\n   * }}\n   */\n\n  /*\n   * 1. Specify the pane the OverlayView will be rendered to. For\n   *    mouse interactivity, use `OverlayView.OVERLAY_MOUSE_TARGET`.\n   *    Defaults to `OverlayView.OVERLAY_LAYER`.\n   */\n  ,\n  mapPaneName: OverlayView.OVERLAY_MOUSE_TARGET\n  /*\n   * 2. Tweak the OverlayView's pixel position. In this case, we're\n   *    centering the content.\n   */\n  ,\n  getPixelPositionOffset: getPixelPositionOffset\n  /*\n   * 3. Create OverlayView content using standard React components.\n   */\n  ,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  style: STYLES.overlayView,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, \"OverlayView\"), React.createElement(Button, {\n  variant: \"contained\",\n  color: \"primary\",\n  onClick: props.onClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, \"I have been clicked \", props.count, \" time\", props.count === 1 ? `` : `s`)))));\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\n */\n\nexport default class MapOverlay extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  render() {\n    return React.createElement(OverlayViewExampleGoogleMap, {\n      containerElement: React.createElement(\"div\", {\n        className: \"embed-responsive embed-responsive-21by9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        className: \"embed-responsive-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }),\n      count: this.state.count,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/map/routes/mapOverlay/Components/MapOverlay.js"],"names":["React","Component","Button","GoogleMap","OverlayView","withGoogleMap","STYLES","mapContainer","height","overlayView","background","border","padding","getPixelPositionOffset","width","x","y","OverlayViewExampleGoogleMap","props","lat","lng","OVERLAY_MOUSE_TARGET","onClick","count","MapOverlay","state","handleClick","bind","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,aAAhC,QAAoD,mBAApD;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AADI,GADD;AAIbC,EAAAA,WAAW,EAAE;AACXC,IAAAA,UAAU,EAAE,MADD;AAEXC,IAAAA,MAAM,EAAE,gBAFG;AAGXC,IAAAA,OAAO,EAAE;AAHE;AAJA,CAAf;;AAWA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuCN,MAAvC,EAA+C;AAC7C,SAAO;AAACO,IAAAA,CAAC,EAAE,EAAED,KAAK,GAAG,CAAV,CAAJ;AAAkBE,IAAAA,CAAC,EAAE,EAAER,MAAM,GAAG,CAAX;AAArB,GAAP;AACD;;AAED,MAAMS,2BAA2B,GAAGZ,aAAa,CAACa,KAAK,IACrD,oBAAC,SAAD;AACE,EAAA,WAAW,EAAE,EADf;AAEE,EAAA,aAAa,EAAE;AAACC,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,GAAG,EAAE,CAAC;AAAvB,GAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAIE,oBAAC,WAAD;AACE,EAAA,QAAQ,EAAE;AAACD,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,GAAG,EAAE,CAAC;AAAvB;AACV;;;;;;;;;;AASA;;;;;AAXF;AAgBE,EAAA,WAAW,EAAEhB,WAAW,CAACiB;AACzB;;;;AAjBF;AAqBE,EAAA,sBAAsB,EAAER;AACxB;;;AAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA0BE;AAAK,EAAA,KAAK,EAAEP,MAAM,CAACG,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,KAAK,EAAC,SAAlC;AAA4C,EAAA,OAAO,EAAES,KAAK,CAACI,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACuBJ,KAAK,CAACK,KAD7B,WACyCL,KAAK,CAACK,KAAN,KAAgB,CAAhB,GAAqB,EAArB,GAA0B,GADnE,CAFF,CA1BF,CAJF,CAD+C,CAAjD;AAyCA;;;;AAGA,eAAe,MAAMC,UAAN,SAAyBvB,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAChDwB,KADgD,GACxC;AACNF,MAAAA,KAAK,EAAE;AADD,KADwC;AAAA,SAKhDG,WALgD,GAKlC,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CALkC;AAAA;;AAOhDD,EAAAA,WAAW,GAAG;AACZ,SAAKE,QAAL,CAAc;AAACL,MAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KAAX,GAAmB;AAA3B,KAAd;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,2BAAD;AACE,MAAA,gBAAgB,EACd;AAAK,QAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAIE,MAAA,UAAU,EAAE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJd;AAKE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWF,KALpB;AAME,MAAA,OAAO,EAAE,KAAKG,WANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAtB+C","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button'\nimport {GoogleMap, OverlayView, withGoogleMap} from 'react-google-maps';\n\nconst STYLES = {\n  mapContainer: {\n    height: 500,\n  },\n  overlayView: {\n    background: '#fff',\n    border: '1px solid #ccc',\n    padding: 15,\n  },\n};\n\nfunction getPixelPositionOffset(width, height) {\n  return {x: -(width / 2), y: -(height / 2)};\n}\n\nconst OverlayViewExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap\n    defaultZoom={15}\n    defaultCenter={{lat: 47.646935, lng: -122.303763}}\n  >\n    <OverlayView\n      position={{lat: 47.646935, lng: -122.303763}}\n      /*\n       * An alternative to specifying position is specifying bounds.\n       * bounds can either be an instance of google.maps.LatLngBounds\n       * or an object in the following format:\n       * bounds={{\n       *    ne: { lat: 62.400471, lng: -150.005608 },\n       *    sw: { lat: 62.281819, lng: -150.287132 }\n       * }}\n       */\n      /*\n       * 1. Specify the pane the OverlayView will be rendered to. For\n       *    mouse interactivity, use `OverlayView.OVERLAY_MOUSE_TARGET`.\n       *    Defaults to `OverlayView.OVERLAY_LAYER`.\n       */\n      mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\n      /*\n       * 2. Tweak the OverlayView's pixel position. In this case, we're\n       *    centering the content.\n       */\n      getPixelPositionOffset={getPixelPositionOffset}\n      /*\n       * 3. Create OverlayView content using standard React components.\n       */\n    >\n      <div style={STYLES.overlayView}>\n        <h1>OverlayView</h1>\n        <Button variant=\"contained\" color=\"primary\" onClick={props.onClick}>\n          I have been clicked {props.count} time{props.count === 1 ? `` : `s`}\n        </Button>\n      </div>\n    </OverlayView>\n  </GoogleMap>\n));\n\n/*\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\n */\nexport default class MapOverlay extends Component {\n  state = {\n    count: 0,\n  };\n\n  handleClick = this.handleClick.bind(this);\n\n  handleClick() {\n    this.setState({count: this.state.count + 1});\n  }\n\n  render() {\n    return (\n      <OverlayViewExampleGoogleMap\n        containerElement={\n          <div className=\"embed-responsive embed-responsive-21by9\"/>\n        }\n        mapElement={<div className=\"embed-responsive-item\"/>}\n        count={this.state.count}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}