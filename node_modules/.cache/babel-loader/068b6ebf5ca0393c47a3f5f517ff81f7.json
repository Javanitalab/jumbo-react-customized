{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/containers/SideNav/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Drawer from '@material-ui/core/Drawer';\nimport SidenavContent from './SidenavContent';\nimport UserInfo from 'components/UserInfo';\nimport { COLLAPSED_DRAWER, FIXED_DRAWER, HORIZONTAL_NAVIGATION } from 'constants/ActionTypes';\nimport { toggleCollapsedNav, updateWindowWidth } from 'actions/Setting';\n\nclass SideNav extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.onToggleCollapsedNav = e => {\n      const val = !this.props.navCollapsed;\n      this.props.toggleCollapsedNav(val);\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', () => {\n      this.props.updateWindowWidth(window.innerWidth);\n    });\n  }\n\n  render() {\n    const {\n      navCollapsed,\n      drawerType,\n      width,\n      navigationStyle\n    } = this.props;\n    let drawerStyle = drawerType.includes(FIXED_DRAWER) ? 'd-xl-flex' : drawerType.includes(COLLAPSED_DRAWER) ? '' : 'd-flex';\n    let type = 'permanent';\n\n    if (drawerType.includes(COLLAPSED_DRAWER) || drawerType.includes(FIXED_DRAWER) && width < 1200) {\n      type = 'temporary';\n    }\n\n    if (navigationStyle === HORIZONTAL_NAVIGATION) {\n      drawerStyle = '';\n      type = 'temporary';\n    }\n\n    return React.createElement(\"div\", {\n      className: `app-sidebar d-none ${drawerStyle}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Drawer, {\n      className: \"app-sidebar-content\",\n      variant: type,\n      open: type.includes('temporary') ? navCollapsed : true,\n      onClose: this.onToggleCollapsedNav,\n      classes: {\n        paper: 'side-nav'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(UserInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(SidenavContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = ({\n  settings\n}) => {\n  const {\n    navCollapsed,\n    drawerType,\n    width,\n    navigationStyle\n  } = settings;\n  return {\n    navCollapsed,\n    drawerType,\n    width,\n    navigationStyle\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  toggleCollapsedNav,\n  updateWindowWidth\n})(SideNav));","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/containers/SideNav/index.js"],"names":["React","connect","withRouter","Drawer","SidenavContent","UserInfo","COLLAPSED_DRAWER","FIXED_DRAWER","HORIZONTAL_NAVIGATION","toggleCollapsedNav","updateWindowWidth","SideNav","PureComponent","onToggleCollapsedNav","e","val","props","navCollapsed","componentDidMount","window","addEventListener","innerWidth","render","drawerType","width","navigationStyle","drawerStyle","includes","type","paper","mapStateToProps","settings"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAAQC,gBAAR,EAA0BC,YAA1B,EAAwCC,qBAAxC,QAAoE,uBAApE;AACA,SAAQC,kBAAR,EAA4BC,iBAA5B,QAAoD,iBAApD;;AAEA,MAAMC,OAAN,SAAsBX,KAAK,CAACY,aAA5B,CAA0C;AAAA;AAAA;;AAAA,SAExCC,oBAFwC,GAEhBC,CAAD,IAAO;AAC5B,YAAMC,GAAG,GAAG,CAAC,KAAKC,KAAL,CAAWC,YAAxB;AACA,WAAKD,KAAL,CAAWP,kBAAX,CAA8BM,GAA9B;AACD,KALuC;AAAA;;AAOxCG,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtC,WAAKJ,KAAL,CAAWN,iBAAX,CAA6BS,MAAM,CAACE,UAApC;AACD,KAFD;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAACL,MAAAA,YAAD;AAAeM,MAAAA,UAAf;AAA2BC,MAAAA,KAA3B;AAAkCC,MAAAA;AAAlC,QAAqD,KAAKT,KAAhE;AACA,QAAIU,WAAW,GAAGH,UAAU,CAACI,QAAX,CAAoBpB,YAApB,IAAoC,WAApC,GAAkDgB,UAAU,CAACI,QAAX,CAAoBrB,gBAApB,IAAwC,EAAxC,GAA6C,QAAjH;AACA,QAAIsB,IAAI,GAAG,WAAX;;AACA,QAAIL,UAAU,CAACI,QAAX,CAAoBrB,gBAApB,KAA0CiB,UAAU,CAACI,QAAX,CAAoBpB,YAApB,KAAqCiB,KAAK,GAAG,IAA3F,EAAkG;AAChGI,MAAAA,IAAI,GAAG,WAAP;AACD;;AAED,QAAIH,eAAe,KAAKjB,qBAAxB,EAA+C;AAC7CkB,MAAAA,WAAW,GAAG,EAAd;AACAE,MAAAA,IAAI,GAAG,WAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAG,sBAAqBF,WAAY,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,qBAAlB;AACQ,MAAA,OAAO,EAAEE,IADjB;AAEQ,MAAA,IAAI,EAAEA,IAAI,CAACD,QAAL,CAAc,WAAd,IAA6BV,YAA7B,GAA4C,IAF1D;AAGQ,MAAA,OAAO,EAAE,KAAKJ,oBAHtB;AAIQ,MAAA,OAAO,EAAE;AACPgB,QAAAA,KAAK,EAAE;AADA,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF,CADF;AAeD;;AAxCuC;;AA2C1C,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACtC,QAAM;AAACd,IAAAA,YAAD;AAAeM,IAAAA,UAAf;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAqDM,QAA3D;AACA,SAAO;AAACd,IAAAA,YAAD;AAAeM,IAAAA,UAAf;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,GAAP;AACD,CAHD;;AAKA,eAAevB,UAAU,CAACD,OAAO,CAAC6B,eAAD,EAAkB;AAACrB,EAAAA,kBAAD;AAAqBC,EAAAA;AAArB,CAAlB,CAAP,CAAkEC,OAAlE,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport Drawer from '@material-ui/core/Drawer';\nimport SidenavContent from './SidenavContent';\nimport UserInfo from 'components/UserInfo';\nimport {COLLAPSED_DRAWER, FIXED_DRAWER, HORIZONTAL_NAVIGATION} from 'constants/ActionTypes';\nimport {toggleCollapsedNav, updateWindowWidth} from 'actions/Setting';\n\nclass SideNav extends React.PureComponent {\n\n  onToggleCollapsedNav = (e) => {\n    const val = !this.props.navCollapsed;\n    this.props.toggleCollapsedNav(val);\n  };\n\n  componentDidMount() {\n    window.addEventListener('resize', () => {\n      this.props.updateWindowWidth(window.innerWidth)\n    });\n  }\n\n  render() {\n    const {navCollapsed, drawerType, width, navigationStyle} = this.props;\n    let drawerStyle = drawerType.includes(FIXED_DRAWER) ? 'd-xl-flex' : drawerType.includes(COLLAPSED_DRAWER) ? '' : 'd-flex';\n    let type = 'permanent';\n    if (drawerType.includes(COLLAPSED_DRAWER) || (drawerType.includes(FIXED_DRAWER) && width < 1200)) {\n      type = 'temporary';\n    }\n\n    if (navigationStyle === HORIZONTAL_NAVIGATION) {\n      drawerStyle = '';\n      type = 'temporary';\n    }\n    return (\n      <div className={`app-sidebar d-none ${drawerStyle}`}>\n        <Drawer className=\"app-sidebar-content\"\n                variant={type}\n                open={type.includes('temporary') ? navCollapsed : true}\n                onClose={this.onToggleCollapsedNav}\n                classes={{\n                  paper: 'side-nav',\n                }}\n        >\n          <UserInfo/>\n          <SidenavContent/>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({settings}) => {\n  const {navCollapsed, drawerType, width, navigationStyle} = settings;\n  return {navCollapsed, drawerType, width, navigationStyle}\n};\n\nexport default withRouter(connect(mapStateToProps, {toggleCollapsedNav, updateWindowWidth})(SideNav));\n\n"]},"metadata":{},"sourceType":"module"}