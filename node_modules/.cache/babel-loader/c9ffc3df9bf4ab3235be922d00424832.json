{"ast":null,"code":"import { ADD_FAVOURITE, FETCH_ALL_CONTACT_SUCCESS, FILTER_CONTACT, GET_ALL_CONTACT, GET_UNSELECTED_ALL_CONTACT, HANDLE_REQUEST_CLOSE, HIDE_CONTACT_LOADER, ON_ADD_CONTACT, ON_ALL_CONTACT_SELECT, ON_CONTACT_CLOSE, ON_CONTACT_SELECT, ON_DELETE_CONTACT, ON_DELETE_SELECTED_CONTACT, ON_FILTER_OPTION_SELECT, ON_SAVE_CONTACT, ON_TOGGLE_DRAWER, SHOW_MESSAGE, UPDATE_SEARCH_USER } from 'constants/ActionTypes';\nimport data from 'app/routes/contact/data/contactList';\nconst INIT_STATE = {\n  alertMessage: '',\n  showMessage: false,\n  loader: true,\n  noContentFoundMessage: 'No contact found in selected folder',\n  selectedSectionId: 1,\n  drawerState: false,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert.johnson@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  searchUser: '',\n  filterOption: 'All contacts',\n  // allContact: [],\n  // contactList: [], //only for prod\n  allContact: data,\n  contactList: data,\n  selectedContact: null,\n  selectedContacts: 0,\n  addContactState: false\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    case ADD_FAVOURITE:\n      {\n        return { ...state,\n          alertMessage: action.payload.starred ? 'Contact removed as star' : 'Contact marked as star',\n          showMessage: true,\n          contactList: state.contactList.map(contact => contact.id === action.payload.id ? { ...contact,\n            starred: !action.payload.starred\n          } : contact),\n          allContact: state.allContact.map(contact => contact.id === action.payload.id ? { ...contact,\n            starred: !action.payload.starred\n          } : contact)\n        };\n      }\n\n    case FETCH_ALL_CONTACT_SUCCESS:\n      {\n        return { ...state,\n          loader: false,\n          allContact: action.payload,\n          contactList: action.payload\n        };\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    case ON_CONTACT_SELECT:\n      {\n        action.payload.selected = !action.payload.selected;\n        let selectedContacts = 0;\n        const contactList = state.contactList.map(contact => {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          if (contact.id === action.payload.id) {\n            if (contact.selected) {\n              selectedContacts++;\n            }\n\n            return action.payload;\n          } else {\n            return contact;\n          }\n        });\n        return { ...state,\n          INIT_STATE,\n          selectedContacts: selectedContacts,\n          contactList: contactList\n        };\n      }\n\n    case ON_ADD_CONTACT:\n      {\n        return { ...state,\n          addContactState: true\n        };\n      }\n\n    case ON_CONTACT_CLOSE:\n      {\n        return { ...state,\n          addContactState: false\n        };\n      }\n\n    case ON_FILTER_OPTION_SELECT:\n      {\n        let selectedSectionId = 0;\n        let filterOption = '';\n        let contactList = [];\n\n        switch (action.payload.name) {\n          case 'All contacts':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              contactList = state.allContact;\n              break;\n            }\n\n          case 'Frequently contacted':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              contactList = state.allContact.filter(contact => contact.frequently);\n              break;\n            }\n\n          case 'Starred contacts':\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              contactList = state.allContact.filter(contact => contact.starred);\n              break;\n            }\n\n          default:\n            {\n              selectedSectionId = action.payload.id;\n              filterOption = action.payload.name;\n              contactList = state.allContact;\n              break;\n            }\n        }\n\n        return { ...state,\n          selectedSectionId,\n          filterOption,\n          contactList,\n          drawerState: false\n        };\n      }\n\n    case ON_SAVE_CONTACT:\n      {\n        let isNew = true;\n        const contactList = state.allContact.map(contact => {\n          if (contact.id === action.payload.id) {\n            isNew = false;\n            return action.payload;\n          } else {\n            return contact;\n          }\n        });\n\n        if (isNew) {\n          contactList.push(action.payload);\n        }\n\n        return { ...state,\n          alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n          showMessage: true,\n          contactList: contactList,\n          allContact: contactList\n        };\n      }\n\n    case ON_DELETE_CONTACT:\n      {\n        return { ...state,\n          alertMessage: 'Contact Deleted Successfully',\n          showMessage: true,\n          allContact: state.allContact.filter(contact => contact.id !== action.payload.id),\n          contactList: state.allContact.filter(contact => contact.id !== action.payload.id)\n        };\n      }\n\n    case ON_DELETE_SELECTED_CONTACT:\n      {\n        const contacts = state.allContact.filter(contact => !contact.selected);\n        return { ...state,\n          alertMessage: 'Contact Deleted Successfully',\n          showMessage: true,\n          allContact: contacts,\n          contactList: contacts,\n          selectedContacts: 0\n        };\n      }\n\n    case FILTER_CONTACT:\n      {\n        const {\n          filterOption\n        } = state;\n        let contactList = [];\n\n        if (action.payload === '') {\n          contactList = state.allContact;\n        } else {\n          const filterContact = state.allContact.filter(contact => contact.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n\n          if (filterOption === 'All contacts') {\n            contactList = filterContact;\n          } else if (filterOption === 'Frequently contacted') {\n            contactList = filterContact.filter(contact => contact.frequently);\n          } else if (filterOption === 'Starred contacts') {\n            contactList = filterContact.filter(contact => contact.starred);\n          }\n        }\n\n        return { ...state,\n          contactList: contactList\n        };\n      }\n\n    case GET_ALL_CONTACT:\n      {\n        let contactList = state.allContact.map(contact => contact ? { ...contact,\n          selected: true\n        } : contact);\n        return { ...state,\n          selectedContacts: contactList.length,\n          allContact: contactList,\n          contactList: contactList\n        };\n      }\n\n    case GET_UNSELECTED_ALL_CONTACT:\n      {\n        let contactList = state.allContact.map(contact => contact ? { ...contact,\n          selected: false\n        } : contact);\n        return { ...state,\n          selectedContacts: 0,\n          allContact: contactList,\n          contactList: contactList\n        };\n      }\n\n    case ON_ALL_CONTACT_SELECT:\n      {\n        const selectAll = state.selectedContacts < state.contactList.length;\n        let selectedContacts = 0;\n        let contactList = [];\n\n        if (selectAll) {\n          contactList = state.allContact.map(contact => contact ? { ...contact,\n            selected: true\n          } : contact);\n          selectedContacts = contactList.length;\n        } else {\n          contactList = state.allContact.map(contact => contact ? { ...contact,\n            selected: true\n          } : contact);\n          selectedContacts = 0;\n        }\n\n        return { ...state,\n          selectedContacts: selectedContacts,\n          allContact: contactList,\n          contactList: contactList\n        };\n      }\n\n    case UPDATE_SEARCH_USER:\n      {\n        return { ...state,\n          searchUser: action.payload\n        };\n      }\n\n    case HANDLE_REQUEST_CLOSE:\n      {\n        return { ...state,\n          showMessage: false\n        };\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return { ...state,\n          drawerState: !state.drawerState\n        };\n      }\n\n    case HIDE_CONTACT_LOADER:\n      {\n        return { ...state,\n          loader: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/reducers/Contact.js"],"names":["ADD_FAVOURITE","FETCH_ALL_CONTACT_SUCCESS","FILTER_CONTACT","GET_ALL_CONTACT","GET_UNSELECTED_ALL_CONTACT","HANDLE_REQUEST_CLOSE","HIDE_CONTACT_LOADER","ON_ADD_CONTACT","ON_ALL_CONTACT_SELECT","ON_CONTACT_CLOSE","ON_CONTACT_SELECT","ON_DELETE_CONTACT","ON_DELETE_SELECTED_CONTACT","ON_FILTER_OPTION_SELECT","ON_SAVE_CONTACT","ON_TOGGLE_DRAWER","SHOW_MESSAGE","UPDATE_SEARCH_USER","data","INIT_STATE","alertMessage","showMessage","loader","noContentFoundMessage","selectedSectionId","drawerState","user","name","email","avatar","searchUser","filterOption","allContact","contactList","selectedContact","selectedContacts","addContactState","state","action","type","payload","starred","map","contact","id","selected","filter","frequently","isNew","push","contacts","filterContact","toLowerCase","indexOf","length","selectAll"],"mappings":"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","sourcesContent":["import {\n  ADD_FAVOURITE,\n  FETCH_ALL_CONTACT_SUCCESS,\n  FILTER_CONTACT,\n  GET_ALL_CONTACT,\n  GET_UNSELECTED_ALL_CONTACT,\n  HANDLE_REQUEST_CLOSE,\n  HIDE_CONTACT_LOADER,\n  ON_ADD_CONTACT,\n  ON_ALL_CONTACT_SELECT,\n  ON_CONTACT_CLOSE,\n  ON_CONTACT_SELECT,\n  ON_DELETE_CONTACT,\n  ON_DELETE_SELECTED_CONTACT,\n  ON_FILTER_OPTION_SELECT,\n  ON_SAVE_CONTACT,\n  ON_TOGGLE_DRAWER,\n  SHOW_MESSAGE,\n  UPDATE_SEARCH_USER\n} from 'constants/ActionTypes';\nimport data from 'app/routes/contact/data/contactList'\n\nconst INIT_STATE = {\n  alertMessage: '',\n  showMessage: false,\n  loader: true,\n  noContentFoundMessage: 'No contact found in selected folder',\n  selectedSectionId: 1,\n  drawerState: false,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert.johnson@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  searchUser: '',\n  filterOption: 'All contacts',\n  // allContact: [],\n  // contactList: [], //only for prod\n  allContact: data,\n  contactList: data,\n  selectedContact: null,\n  selectedContacts: 0,\n  addContactState: false,\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case ADD_FAVOURITE: {\n      return {\n        ...state,\n        alertMessage: action.payload.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: state.contactList.map((contact) => contact.id === action.payload.id ? {\n          ...contact,\n          starred: !action.payload.starred\n        } : contact),\n        allContact: state.allContact.map((contact) => contact.id === action.payload.id ? {\n          ...contact,\n          starred: !action.payload.starred\n        } : contact)\n      };\n    }\n    case FETCH_ALL_CONTACT_SUCCESS: {\n      return {\n        ...state,\n        loader: false,\n        allContact: action.payload,\n        contactList: action.payload,\n      }\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      }\n    }\n    case ON_CONTACT_SELECT: {\n      action.payload.selected = !action.payload.selected;\n      let selectedContacts = 0;\n      const contactList = state.contactList.map(contact => {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          if (contact.id === action.payload.id) {\n            if (contact.selected) {\n              selectedContacts++;\n            }\n            return action.payload;\n          } else {\n            return contact;\n          }\n        }\n      );\n      return {\n        ...state, INIT_STATE,\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      };\n    }\n    case ON_ADD_CONTACT: {\n      return {...state, addContactState: true};\n    }\n    case ON_CONTACT_CLOSE: {\n      return {...state, addContactState: false};\n    }\n    case ON_FILTER_OPTION_SELECT: {\n      let selectedSectionId = 0;\n      let filterOption = '';\n      let contactList = [];\n      switch (action.payload.name) {\n        case 'All contacts': {\n          selectedSectionId = action.payload.id;\n          filterOption = action.payload.name;\n          contactList = state.allContact;\n          break;\n        }\n        case 'Frequently contacted': {\n          selectedSectionId = action.payload.id;\n          filterOption = action.payload.name;\n          contactList = state.allContact.filter((contact) => contact.frequently);\n          break;\n        }\n        case 'Starred contacts': {\n          selectedSectionId = action.payload.id;\n          filterOption = action.payload.name;\n          contactList = state.allContact.filter((contact) => contact.starred);\n          break;\n        }\n\n        default: {\n          selectedSectionId = action.payload.id;\n          filterOption = action.payload.name;\n          contactList = state.allContact;\n          break;\n        }\n      }\n      return {\n        ...state, selectedSectionId, filterOption, contactList, drawerState: false\n      };\n    }\n    case ON_SAVE_CONTACT: {\n      let isNew = true;\n      const contactList = state.allContact.map((contact) => {\n        if (contact.id === action.payload.id) {\n          isNew = false;\n          return action.payload\n        } else {\n          return contact\n        }\n      });\n      if (isNew) {\n        contactList.push(action.payload);\n      }\n      return {\n        ...state,\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList,\n      }\n    }\n    case ON_DELETE_CONTACT: {\n      return {\n        ...state,\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: state.allContact.filter((contact) => contact.id !== action.payload.id),\n        contactList: state.allContact.filter((contact) => contact.id !== action.payload.id),\n      }\n    }\n    case ON_DELETE_SELECTED_CONTACT: {\n      const contacts = state.allContact.filter((contact) => !contact.selected);\n      return {\n        ...state,\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      }\n    }\n    case FILTER_CONTACT: {\n      const {filterOption} = state;\n      let contactList = [];\n      if (action.payload === '') {\n        contactList = state.allContact;\n      } else {\n        const filterContact = state.allContact.filter((contact) =>\n          contact.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n        if (filterOption === 'All contacts') {\n          contactList = filterContact\n        } else if (filterOption === 'Frequently contacted') {\n          contactList = filterContact.filter((contact) => contact.frequently);\n        } else if (filterOption === 'Starred contacts') {\n          contactList = filterContact.filter((contact) => contact.starred);\n        }\n      }\n      return {...state, contactList: contactList}\n    }\n    case GET_ALL_CONTACT: {\n      let contactList = state.allContact.map((contact) => contact ? {\n        ...contact,\n        selected: true\n      } : contact);\n      return {\n        ...state,\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      }\n    }\n    case GET_UNSELECTED_ALL_CONTACT: {\n      let contactList = state.allContact.map((contact) => contact ? {\n        ...contact,\n        selected: false\n      } : contact);\n      return {\n        ...state,\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      }\n    }\n    case ON_ALL_CONTACT_SELECT: {\n      const selectAll = state.selectedContacts < state.contactList.length;\n      let selectedContacts = 0;\n      let contactList = [];\n      if (selectAll) {\n        contactList = state.allContact.map((contact) => contact ? {\n          ...contact,\n          selected: true\n        } : contact);\n        selectedContacts = contactList.length;\n      } else {\n        contactList = state.allContact.map((contact) => contact ? {\n          ...contact,\n          selected: true\n        } : contact);\n        selectedContacts = 0;\n      }\n      return {\n        ...state,\n        selectedContacts: selectedContacts,\n        allContact: contactList,\n        contactList: contactList\n      }\n    }\n    case UPDATE_SEARCH_USER: {\n      return {...state, searchUser: action.payload}\n    }\n    case HANDLE_REQUEST_CLOSE: {\n      return {...state, showMessage: false}\n    }\n    case ON_TOGGLE_DRAWER: {\n      return {...state, drawerState: !state.drawerState}\n    }\n    case HIDE_CONTACT_LOADER: {\n      return {...state, loader: false}\n    }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}