{"ast":null,"code":"import Moment from 'moment';\nimport users from 'app/routes/chatPanel/data/chatUsers';\nimport conversationList from 'app/routes/chatPanel/data/conversationList';\nimport { FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS, FETCH_ALL_CHAT_USER_SUCCESS, FILTER_CONTACT, FILTER_USERS, ON_HIDE_LOADER, ON_SELECT_USER, ON_TOGGLE_DRAWER, SHOW_MESSAGE, SUBMIT_COMMENT, UPDATE_MESSAGE_VALUE, UPDATE_SEARCH_CHAT_USER } from 'constants/ActionTypes';\nimport { USER_INFO_STATE } from '../constants/ActionTypes';\nconst INIT_STATE = {\n  loader: true,\n  userNotFound: 'No user found',\n  drawerState: false,\n  selectedSectionId: '',\n  userState: 1,\n  searchChatUser: '',\n  // contactList: [], onlt for production\n  contactList: users.filter(user => !user.recent),\n  selectedUser: null,\n  message: '',\n  // chatUsers: [],\n  // conversationList: [], //ony for prod\n  chatUsers: users.filter(user => user.recent),\n  conversationList: conversationList,\n  conversation: null\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    case FILTER_CONTACT:\n      {\n        if (action.payload === '') {\n          return { ...state,\n            contactList: users.filter(user => !user.recent)\n          };\n        } else {\n          return { ...state,\n            contactList: users.filter(user => !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1)\n          };\n        }\n      }\n\n    case FILTER_USERS:\n      {\n        if (action.payload === '') {\n          return { ...state,\n            chatUsers: users.filter(user => !user.recent)\n          };\n        } else {\n          return { ...state,\n            chatUsers: users.filter(user => !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1)\n          };\n        }\n      }\n\n    case ON_SELECT_USER:\n      {\n        return { ...state,\n          loader: true,\n          drawerState: false,\n          selectedSectionId: action.payload.id,\n          selectedUser: action.payload,\n          conversation: state.conversationList.find(data => data.id === action.payload.id)\n        };\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return { ...state,\n          drawerState: !state.drawerState\n        };\n      }\n\n    case ON_HIDE_LOADER:\n      {\n        return { ...state,\n          loader: false\n        };\n      }\n\n    case USER_INFO_STATE:\n      {\n        return { ...state,\n          userState: action.payload\n        };\n      }\n\n    case SUBMIT_COMMENT:\n      {\n        const updatedConversation = state.conversation.conversationData.concat({\n          'type': 'sent',\n          'message': state.message,\n          'sentAt': Moment().format('hh:mm:ss A')\n        });\n        return { ...state,\n          conversation: { ...state.conversation,\n            conversationData: updatedConversation\n          },\n          message: '',\n          conversationList: state.conversationList.map(conversationData => {\n            if (conversationData.id === state.conversation.id) {\n              return { ...state.conversation,\n                conversationData: updatedConversation\n              };\n            } else {\n              return conversationData;\n            }\n          })\n        };\n      }\n\n    case UPDATE_MESSAGE_VALUE:\n      {\n        return { ...state,\n          message: action.payload\n        };\n      }\n\n    case UPDATE_SEARCH_CHAT_USER:\n      {\n        return { ...state,\n          searchChatUser: action.payload\n        };\n      }\n\n    case FETCH_ALL_CHAT_USER_SUCCESS:\n      {\n        return { ...state,\n          contactList: action.payload.filter(user => !user.recent),\n          chatUsers: action.payload.filter(user => user.recent),\n          loader: false\n        };\n      }\n\n    case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS:\n      {\n        return { ...state,\n          conversationList: conversationList\n        };\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/reducers/Chat.js"],"names":["Moment","users","conversationList","FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS","FETCH_ALL_CHAT_USER_SUCCESS","FILTER_CONTACT","FILTER_USERS","ON_HIDE_LOADER","ON_SELECT_USER","ON_TOGGLE_DRAWER","SHOW_MESSAGE","SUBMIT_COMMENT","UPDATE_MESSAGE_VALUE","UPDATE_SEARCH_CHAT_USER","USER_INFO_STATE","INIT_STATE","loader","userNotFound","drawerState","selectedSectionId","userState","searchChatUser","contactList","filter","user","recent","selectedUser","message","chatUsers","conversation","state","action","type","payload","name","toLowerCase","indexOf","id","find","data","updatedConversation","conversationData","concat","format","map","alertMessage","showMessage"],"mappings":"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","sourcesContent":["import Moment from 'moment';\nimport users from 'app/routes/chatPanel/data/chatUsers';\nimport conversationList from 'app/routes/chatPanel/data/conversationList';\nimport {\n  FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS,\n  FETCH_ALL_CHAT_USER_SUCCESS,\n  FILTER_CONTACT,\n  FILTER_USERS,\n  ON_HIDE_LOADER,\n  ON_SELECT_USER,\n  ON_TOGGLE_DRAWER,\n  SHOW_MESSAGE,\n  SUBMIT_COMMENT,\n  UPDATE_MESSAGE_VALUE,\n  UPDATE_SEARCH_CHAT_USER\n} from 'constants/ActionTypes';\nimport {USER_INFO_STATE} from '../constants/ActionTypes';\n\n\nconst INIT_STATE = {\n  loader: true,\n  userNotFound: 'No user found',\n  drawerState: false,\n  selectedSectionId: '',\n  userState: 1,\n  searchChatUser: '',\n  // contactList: [], onlt for production\n  contactList: users.filter((user) => !user.recent),\n  selectedUser: null,\n  message: '',\n  // chatUsers: [],\n  // conversationList: [], //ony for prod\n  chatUsers: users.filter((user) => user.recent),\n  conversationList: conversationList,\n  conversation: null\n};\n\n\nexport default (state = INIT_STATE, action) => {\n\n  switch (action.type) {\n    case FILTER_CONTACT: {\n      if (action.payload === '') {\n        return {\n          ...state, contactList: users.filter(user => !user.recent)\n        }\n      } else {\n        return {\n          ...state, contactList: users.filter((user) =>\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\n          )\n        }\n      }\n    }\n\n    case FILTER_USERS: {\n      if (action.payload === '') {\n        return {\n          ...state, chatUsers: users.filter(user => !user.recent)\n        }\n      } else {\n        return {\n          ...state, chatUsers: users.filter((user) =>\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\n          )\n        }\n      }\n    }\n\n    case ON_SELECT_USER: {\n      return {\n        ...state,\n        loader: true,\n        drawerState: false,\n        selectedSectionId: action.payload.id,\n        selectedUser: action.payload,\n        conversation: state.conversationList.find((data) => data.id === action.payload.id)\n      }\n    }\n    case ON_TOGGLE_DRAWER: {\n      return {...state, drawerState: !state.drawerState}\n    }\n    case ON_HIDE_LOADER: {\n      return {...state, loader: false}\n    }\n    case USER_INFO_STATE: {\n      return {...state, userState: action.payload}\n    }\n\n    case SUBMIT_COMMENT: {\n      const updatedConversation = state.conversation.conversationData.concat({\n        'type': 'sent',\n        'message': state.message,\n        'sentAt': Moment().format('hh:mm:ss A'),\n      });\n\n      return {\n        ...state,\n        conversation: {\n          ...state.conversation, conversationData: updatedConversation\n        },\n        message: '',\n        conversationList: state.conversationList.map(conversationData => {\n          if (conversationData.id === state.conversation.id) {\n            return {...state.conversation, conversationData: updatedConversation};\n          } else {\n            return conversationData;\n          }\n        })\n\n      }\n    }\n\n    case UPDATE_MESSAGE_VALUE: {\n      return {...state, message: action.payload}\n    }\n\n    case UPDATE_SEARCH_CHAT_USER: {\n      return {...state, searchChatUser: action.payload}\n    }\n\n    case FETCH_ALL_CHAT_USER_SUCCESS: {\n      return {\n        ...state,\n        contactList: action.payload.filter((user) => !user.recent),\n        chatUsers: action.payload.filter((user) => user.recent),\n        loader: false,\n      }\n    }\n    case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS: {\n      return {\n        ...state,\n        conversationList: conversationList\n      }\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      }\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}