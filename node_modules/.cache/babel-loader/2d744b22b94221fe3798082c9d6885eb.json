{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchMailRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{all,call,put,takeEvery}from'redux-saga/effects';import{fetchMailsSuccess,showMailMessage}from'actions/Mail';import{database}from'../firebase/firebase';import{FETCH_ALL_MAIL}from'constants/ActionTypes';var getMails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return database.ref('prod/mail').once('value').then(function(snapshot){var mails=[];snapshot.forEach(function(rawData){var mail=rawData.val();// change object to array\nvar labels=[];if(mail.labels){mail.labels.forEach(function(label){return labels.push(label);});}// change object to array\nvar tos=[];mail.to.forEach(function(to){return tos.push(to);});mail.to=tos;mail.labels=labels;mails.push(mail);});return mails;}).catch(function(error){return error;});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getMails(){return _ref.apply(this,arguments);};}();function fetchMailRequest(){var fetchedMail;return _regeneratorRuntime.wrap(function fetchMailRequest$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(getMails);case 3:fetchedMail=_context2.sent;_context2.next=6;return put(fetchMailsSuccess(fetchedMail));case 6:_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);_context2.next=12;return put(showMailMessage(_context2.t0));case 12:case\"end\":return _context2.stop();}}},_marked,null,[[0,8]]);}export default function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([takeEvery(FETCH_ALL_MAIL,fetchMailRequest)]);case 2:case\"end\":return _context3.stop();}}},_marked2);}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Mail.js"],"names":["fetchMailRequest","rootSaga","all","call","put","takeEvery","fetchMailsSuccess","showMailMessage","database","FETCH_ALL_MAIL","getMails","ref","once","then","snapshot","mails","forEach","rawData","mail","val","labels","label","push","tos","to","catch","error","fetchedMail"],"mappings":"iUAmCUA,gB,iDAUeC,Q,EA7CzB,OAAQC,GAAR,CAAaC,IAAb,CAAmBC,GAAnB,CAAwBC,SAAxB,KAAwC,oBAAxC,CACA,OAAQC,iBAAR,CAA2BC,eAA3B,KAAiD,cAAjD,CACA,OAAQC,QAAR,KAAuB,sBAAvB,CACA,OAAQC,cAAR,KAA6B,uBAA7B,CAEA,GAAMC,CAAAA,QAAQ,0FAAG,yJACTF,CAAAA,QAAQ,CAACG,GAAT,CAAa,WAAb,EAA0BC,IAA1B,CAA+B,OAA/B,EACHC,IADG,CACE,SAACC,QAAD,CAAc,CAClB,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5B,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAACE,GAAR,EAAb,CAEA;AACA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CACA,GAAIF,IAAI,CAACE,MAAT,CAAiB,CACfF,IAAI,CAACE,MAAL,CAAYJ,OAAZ,CAAoB,SAACK,KAAD,QAClBD,CAAAA,MAAM,CAACE,IAAP,CAAYD,KAAZ,CADkB,EAApB,EAGD,CAED;AACA,GAAME,CAAAA,GAAG,CAAG,EAAZ,CACAL,IAAI,CAACM,EAAL,CAAQR,OAAR,CAAgB,SAACQ,EAAD,QACdD,CAAAA,GAAG,CAACD,IAAJ,CAASE,EAAT,CADc,EAAhB,EAIAN,IAAI,CAACM,EAAL,CAAUD,GAAV,CACAL,IAAI,CAACE,MAAL,CAAcA,MAAd,CACAL,KAAK,CAACO,IAAN,CAAWJ,IAAX,EACD,CApBD,EAqBA,MAAOH,CAAAA,KAAP,CACD,CAzBG,EA0BHU,KA1BG,CA0BG,SAAAC,KAAK,QAAIA,CAAAA,KAAJ,EA1BR,CADS,6GAAH,kBAARhB,CAAAA,QAAQ,0CAAd,CA8BA,QAAUV,CAAAA,gBAAV,iLAEwB,MAAMG,CAAAA,IAAI,CAACO,QAAD,CAAV,CAFxB,OAEUiB,WAFV,iCAGI,MAAMvB,CAAAA,GAAG,CAACE,iBAAiB,CAACqB,WAAD,CAAlB,CAAT,CAHJ,4GAKI,MAAMvB,CAAAA,GAAG,CAACG,eAAe,cAAhB,CAAT,CALJ,qEAUA,cAAe,SAAUN,CAAAA,QAAV,wIACb,MAAMC,CAAAA,GAAG,CAAC,CAACG,SAAS,CAACI,cAAD,CAAiBT,gBAAjB,CAAV,CAAD,CAAT,CADa","sourcesContent":["import {all, call, put, takeEvery} from 'redux-saga/effects';\nimport {fetchMailsSuccess, showMailMessage} from 'actions/Mail';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_MAIL} from 'constants/ActionTypes';\n\nconst getMails = async () =>\n  await database.ref('prod/mail').once('value')\n    .then((snapshot) => {\n      const mails = [];\n      snapshot.forEach((rawData) => {\n        const mail = rawData.val();\n\n        // change object to array\n        const labels = [];\n        if (mail.labels) {\n          mail.labels.forEach((label) =>\n            labels.push(label)\n          );\n        }\n\n        // change object to array\n        const tos = [];\n        mail.to.forEach((to) =>\n          tos.push(to)\n        );\n\n        mail.to = tos;\n        mail.labels = labels;\n        mails.push(mail);\n      });\n      return mails;\n    })\n    .catch(error => error);\n\n\nfunction* fetchMailRequest() {\n  try {\n    const fetchedMail = yield call(getMails);\n    yield put(fetchMailsSuccess(fetchedMail));\n  } catch (error) {\n    yield put(showMailMessage(error));\n  }\n}\n\n\nexport default function* rootSaga() {\n  yield all([takeEvery(FETCH_ALL_MAIL, fetchMailRequest)]);\n}"]},"metadata":{},"sourceType":"module"}