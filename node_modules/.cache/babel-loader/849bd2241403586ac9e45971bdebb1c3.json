{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchTodoRequest),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchTodoConversationRequest),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(fetchTodos),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(fetchTodoConversation),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{fetchTodosConversationSuccess,fetchTodosSuccess,showTodoMessage}from'actions/ToDo';import{database}from'../firebase/firebase';import{FETCH_ALL_TODO,FETCH_ALL_TODO_CONVERSATION}from'constants/ActionTypes';var getTodos=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return database.ref('prod/todo/todos').once('value').then(function(snapshot){var todos=[];snapshot.forEach(function(rawData){var todo=rawData.val();// change object to array\nvar labels=[];if(todo.labels){todo.labels.forEach(function(label){return labels.push(label);});}todo.labels=labels;todos.push(todo);});return todos;}).catch(function(error){return error;});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getTodos(){return _ref.apply(this,arguments);};}();var getTodosConversation=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return database.ref('prod/todo/conversation').once('value').then(function(snapshot){var conversations=[];snapshot.forEach(function(rawData){var conversation=rawData.val();// change object to array\nvar conversationDatas=[];if(conversation.conversationData){conversation.conversationData.forEach(function(conversationData){return conversationDatas.push(conversationData);});}conversation.conversationData=conversationDatas;conversations.push(conversation);});return conversations;}).catch(function(error){return error;});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function getTodosConversation(){return _ref2.apply(this,arguments);};}();function fetchTodoRequest(){var fetchedTodo;return _regeneratorRuntime.wrap(function fetchTodoRequest$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return call(getTodos);case 3:fetchedTodo=_context3.sent;_context3.next=6;return put(fetchTodosSuccess(fetchedTodo));case 6:_context3.next=12;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);_context3.next=12;return put(showTodoMessage(_context3.t0));case 12:case\"end\":return _context3.stop();}}},_marked,null,[[0,8]]);}function fetchTodoConversationRequest(){var fetchedTodoConversation;return _regeneratorRuntime.wrap(function fetchTodoConversationRequest$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return call(getTodosConversation);case 3:fetchedTodoConversation=_context4.sent;_context4.next=6;return put(fetchTodosConversationSuccess(fetchedTodoConversation));case 6:_context4.next=12;break;case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](0);_context4.next=12;return put(showTodoMessage(_context4.t0));case 12:case\"end\":return _context4.stop();}}},_marked2,null,[[0,8]]);}export function fetchTodos(){return _regeneratorRuntime.wrap(function fetchTodos$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return takeEvery(FETCH_ALL_TODO,fetchTodoRequest);case 2:case\"end\":return _context5.stop();}}},_marked3);}export function fetchTodoConversation(){return _regeneratorRuntime.wrap(function fetchTodoConversation$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return takeEvery(FETCH_ALL_TODO_CONVERSATION,fetchTodoConversationRequest);case 2:case\"end\":return _context6.stop();}}},_marked4);}export default function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return all([fork(fetchTodoConversation),fork(fetchTodos)]);case 2:case\"end\":return _context7.stop();}}},_marked5);}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Todo.js"],"names":["fetchTodoRequest","fetchTodoConversationRequest","fetchTodos","fetchTodoConversation","rootSaga","all","call","fork","put","takeEvery","fetchTodosConversationSuccess","fetchTodosSuccess","showTodoMessage","database","FETCH_ALL_TODO","FETCH_ALL_TODO_CONVERSATION","getTodos","ref","once","then","snapshot","todos","forEach","rawData","todo","val","labels","label","push","catch","error","getTodosConversation","conversations","conversation","conversationDatas","conversationData","fetchedTodo","fetchedTodoConversation"],"mappings":"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","sourcesContent":["import {all, call, fork, put, takeEvery} from 'redux-saga/effects';\nimport {fetchTodosConversationSuccess, fetchTodosSuccess, showTodoMessage} from 'actions/ToDo';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_TODO, FETCH_ALL_TODO_CONVERSATION} from 'constants/ActionTypes';\n\nconst getTodos = async () =>\n  await database.ref('prod/todo/todos').once('value')\n    .then((snapshot) => {\n      const todos = [];\n      snapshot.forEach((rawData) => {\n        const todo = rawData.val();\n\n        // change object to array\n        const labels = [];\n        if (todo.labels) {\n          todo.labels.forEach((label) =>\n            labels.push(label)\n          );\n        }\n\n        todo.labels = labels;\n        todos.push(todo);\n      });\n      return todos;\n    })\n    .catch(error => error);\n\nconst getTodosConversation = async () =>\n  await database.ref('prod/todo/conversation').once('value')\n    .then((snapshot) => {\n      const conversations = [];\n      snapshot.forEach((rawData) => {\n        const conversation = rawData.val();\n\n        // change object to array\n        const conversationDatas = [];\n        if (conversation.conversationData) {\n          conversation.conversationData.forEach((conversationData) =>\n            conversationDatas.push(conversationData)\n          );\n        }\n        conversation.conversationData = conversationDatas;\n        conversations.push(conversation);\n      });\n\n      return conversations;\n    })\n    .catch(error => error);\n\n\nfunction* fetchTodoRequest() {\n  try {\n    const fetchedTodo = yield call(getTodos);\n    yield put(fetchTodosSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nfunction* fetchTodoConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getTodosConversation);\n    yield put(fetchTodosConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nexport function* fetchTodos() {\n  yield takeEvery(FETCH_ALL_TODO, fetchTodoRequest);\n}\n\nexport function* fetchTodoConversation() {\n  yield takeEvery(FETCH_ALL_TODO_CONVERSATION, fetchTodoConversationRequest);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(fetchTodoConversation), fork(fetchTodos)]);\n}"]},"metadata":{},"sourceType":"module"}