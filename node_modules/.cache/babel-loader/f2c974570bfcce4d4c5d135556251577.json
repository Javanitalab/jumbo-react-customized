{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/progressbar/circular/interactive/CircularFab.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport green from '@material-ui/core/colors/green';\nimport grey from '@material-ui/core/colors/grey';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  wrapper: {\n    margin: theme.spacing.unit,\n    position: 'relative'\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    color: grey[50],\n    '&:hover': {\n      backgroundColor: green[700]\n    }\n  },\n  fabProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: -6,\n    left: -6,\n    zIndex: 1\n  },\n  buttonProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12\n  }\n});\n\nclass CircularFab extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      success: false\n    };\n\n    this.handleButtonClick = () => {\n      if (!this.state.loading) {\n        this.setState({\n          success: false,\n          loading: true\n        }, () => {\n          this.timer = setTimeout(() => {\n            this.setState({\n              loading: false,\n              success: true\n            });\n          }, 2000);\n        });\n      }\n    };\n\n    this.timer = undefined;\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const {\n      loading,\n      success\n    } = this.state;\n    const {\n      classes\n    } = this.props;\n    const buttonClassname = classNames({\n      [classes.buttonSuccess]: success\n    });\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.wrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Fab, {\n      color: \"primary\",\n      className: buttonClassname,\n      onClick: this.handleButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, success ? React.createElement(CheckIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }) : React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), loading && React.createElement(CircularProgress, {\n      size: 68,\n      className: classes.fabProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classes.wrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: buttonClassname,\n      disabled: loading,\n      onClick: this.handleButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Accept terms\"), loading && React.createElement(CircularProgress, {\n      size: 24,\n      className: classes.buttonProgress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nCircularFab.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CircularFab);","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/progressbar/circular/interactive/CircularFab.js"],"names":["React","PropTypes","classNames","withStyles","CircularProgress","green","grey","Button","Fab","CheckIcon","SaveIcon","styles","theme","root","display","alignItems","wrapper","margin","spacing","unit","position","buttonSuccess","backgroundColor","color","fabProgress","top","left","zIndex","buttonProgress","marginTop","marginLeft","CircularFab","Component","state","loading","success","handleButtonClick","setState","timer","setTimeout","undefined","componentWillUnmount","clearTimeout","render","classes","props","buttonClassname","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACvBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,UAAU,EAAE;AAFR,GADiB;AAKvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAcC,IADf;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GALc;AASvBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,eAAe,EAAEjB,KAAK,CAAC,GAAD,CADT;AAEbkB,IAAAA,KAAK,EAAEjB,IAAI,CAAC,EAAD,CAFE;AAGb,eAAW;AACTgB,MAAAA,eAAe,EAAEjB,KAAK,CAAC,GAAD;AADb;AAHE,GATQ;AAgBvBmB,EAAAA,WAAW,EAAE;AACXD,IAAAA,KAAK,EAAElB,KAAK,CAAC,GAAD,CADD;AAEXe,IAAAA,QAAQ,EAAE,UAFC;AAGXK,IAAAA,GAAG,EAAE,CAAC,CAHK;AAIXC,IAAAA,IAAI,EAAE,CAAC,CAJI;AAKXC,IAAAA,MAAM,EAAE;AALG,GAhBU;AAuBvBC,EAAAA,cAAc,EAAE;AACdL,IAAAA,KAAK,EAAElB,KAAK,CAAC,GAAD,CADE;AAEde,IAAAA,QAAQ,EAAE,UAFI;AAGdK,IAAAA,GAAG,EAAE,KAHS;AAIdC,IAAAA,IAAI,EAAE,KAJQ;AAKdG,IAAAA,SAAS,EAAE,CAAC,EALE;AAMdC,IAAAA,UAAU,EAAE,CAAC;AANC;AAvBO,CAAL,CAApB;;AAiCA,MAAMC,WAAN,SAA0B/B,KAAK,CAACgC,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,OAAO,EAAE;AAFH,KADgC;;AAAA,SAKxCC,iBALwC,GAKpB,MAAM;AACxB,UAAI,CAAC,KAAKH,KAAL,CAAWC,OAAhB,EAAyB;AACvB,aAAKG,QAAL,CACE;AACEF,UAAAA,OAAO,EAAE,KADX;AAEED,UAAAA,OAAO,EAAE;AAFX,SADF,EAKE,MAAM;AACJ,eAAKI,KAAL,GAAaC,UAAU,CAAC,MAAM;AAC5B,iBAAKF,QAAL,CAAc;AACZH,cAAAA,OAAO,EAAE,KADG;AAEZC,cAAAA,OAAO,EAAE;AAFG,aAAd;AAID,WALsB,EAKpB,IALoB,CAAvB;AAMD,SAZH;AAcD;AACF,KAtBuC;;AAAA,SAuBxCG,KAvBwC,GAuBhCE,SAvBgC;AAAA;;AAyBxCC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,YAAY,CAAC,KAAKJ,KAAN,CAAZ;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAACT,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAqB,KAAKF,KAAhC;AACA,UAAM;AAACW,MAAAA;AAAD,QAAY,KAAKC,KAAvB;AACA,UAAMC,eAAe,GAAG5C,UAAU,CAAC;AACjC,OAAC0C,OAAO,CAACvB,aAAT,GAAyBc;AADQ,KAAD,CAAlC;AAIA,WACE;AAAK,MAAA,SAAS,EAAES,OAAO,CAAC/B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAE+B,OAAO,CAAC5B,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAC,SAAX;AAAqB,MAAA,SAAS,EAAE8B,eAAhC;AAAiD,MAAA,OAAO,EAAE,KAAKV,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,OAAO,GAAG,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAkB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B,CADF,EAIGD,OAAO,IAAI,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,EAAxB;AAA4B,MAAA,SAAS,EAAEU,OAAO,CAACpB,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJd,CADF,EAOE;AAAK,MAAA,SAAS,EAAEoB,OAAO,CAAC5B,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,SAAS,EAAE8B,eAHb;AAIE,MAAA,QAAQ,EAAEZ,OAJZ;AAKE,MAAA,OAAO,EAAE,KAAKE,iBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAUGF,OAAO,IAAI,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,EAAxB;AAA4B,MAAA,SAAS,EAAEU,OAAO,CAAChB,cAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVd,CAPF,CADF;AAsBD;;AA1DuC;;AA6D1CG,WAAW,CAACgB,SAAZ,GAAwB;AACtBH,EAAAA,OAAO,EAAE3C,SAAS,CAAC+C,MAAV,CAAiBC;AADJ,CAAxB;AAIA,eAAe9C,UAAU,CAACQ,MAAD,CAAV,CAAmBoB,WAAnB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {withStyles} from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport green from '@material-ui/core/colors/green';\nimport grey from '@material-ui/core/colors/grey';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  wrapper: {\n    margin: theme.spacing.unit,\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    color: grey[50],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  fabProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: -6,\n    left: -6,\n    zIndex: 1,\n  },\n  buttonProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12,\n  },\n});\n\nclass CircularFab extends React.Component {\n  state = {\n    loading: false,\n    success: false,\n  };\n  handleButtonClick = () => {\n    if (!this.state.loading) {\n      this.setState(\n        {\n          success: false,\n          loading: true,\n        },\n        () => {\n          this.timer = setTimeout(() => {\n            this.setState({\n              loading: false,\n              success: true,\n            });\n          }, 2000);\n        },\n      );\n    }\n  };\n  timer = undefined;\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const {loading, success} = this.state;\n    const {classes} = this.props;\n    const buttonClassname = classNames({\n      [classes.buttonSuccess]: success,\n    });\n\n    return (\n      <div className={classes.root}>\n        <div className={classes.wrapper}>\n          <Fab color=\"primary\" className={buttonClassname} onClick={this.handleButtonClick}>\n            {success ? <CheckIcon/> : <SaveIcon/>}\n          </Fab>\n          {loading && <CircularProgress size={68} className={classes.fabProgress}/>}\n        </div>\n        <div className={classes.wrapper}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={buttonClassname}\n            disabled={loading}\n            onClick={this.handleButtonClick}\n          >\n            Accept terms\n          </Button>\n          {loading && <CircularProgress size={24} className={classes.buttonProgress}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nCircularFab.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularFab);"]},"metadata":{},"sourceType":"module"}