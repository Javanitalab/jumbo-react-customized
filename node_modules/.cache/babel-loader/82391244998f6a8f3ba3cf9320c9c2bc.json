{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/charts/routes/area/Components/PercentAreaChart.js\";\nimport React from 'react';\nimport { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nconst data = [{\n  month: '2015.01',\n  a: 4000,\n  b: 2400,\n  c: 2400\n}, {\n  month: '2015.02',\n  a: 3000,\n  b: 1398,\n  c: 2210\n}, {\n  month: '2015.03',\n  a: 2000,\n  b: 9800,\n  c: 2290\n}, {\n  month: '2015.04',\n  a: 2780,\n  b: 3908,\n  c: 2000\n}, {\n  month: '2015.05',\n  a: 1890,\n  b: 4800,\n  c: 2181\n}, {\n  month: '2015.06',\n  a: 2390,\n  b: 3800,\n  c: 2500\n}, {\n  month: '2015.07',\n  a: 3490,\n  b: 4300,\n  c: 2100\n}];\n\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = (decimal, fixed = 0) => {\n  return `${(decimal * 100).toFixed(fixed)}%`;\n};\n\nconst renderTooltipContent = o => {\n  const {\n    payload,\n    label\n  } = o;\n  const total = payload.reduce((result, entry) => result + entry.value, 0);\n  return React.createElement(\"div\", {\n    className: \"customized-tooltip-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, `${label} (Total: ${total})`), React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, payload.map((entry, index) => React.createElement(\"li\", {\n    key: `item-${index}`,\n    style: {\n      color: entry.color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, `${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`))));\n};\n\nconst PercentAreaChart = () => React.createElement(ResponsiveContainer, {\n  width: \"100%\",\n  height: 200,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, React.createElement(AreaChart, {\n  data: data,\n  stackOffset: \"expand\",\n  margin: {\n    top: 10,\n    right: 0,\n    left: -25,\n    bottom: 0\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, React.createElement(XAxis, {\n  dataKey: \"month\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}), React.createElement(YAxis, {\n  tickFormatter: toPercent,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), React.createElement(CartesianGrid, {\n  strokeDasharray: \"3 3\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), React.createElement(Tooltip, {\n  content: renderTooltipContent,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), React.createElement(Area, {\n  type: \"monotone\",\n  dataKey: \"a\",\n  stackId: \"1\",\n  stroke: \"#3367d6\",\n  fill: \"#3367d6\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}), React.createElement(Area, {\n  type: \"monotone\",\n  dataKey: \"b\",\n  stackId: \"1\",\n  stroke: \"#59AA2B\",\n  fill: \"#59AA2B\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}), React.createElement(Area, {\n  type: \"monotone\",\n  dataKey: \"c\",\n  stackId: \"1\",\n  stroke: \"#ffc658\",\n  fill: \"#ffc658\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n})));\n\nexport default PercentAreaChart;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/charts/routes/area/Components/PercentAreaChart.js"],"names":["React","Area","AreaChart","CartesianGrid","ResponsiveContainer","Tooltip","XAxis","YAxis","data","month","a","b","c","getPercent","value","total","ratio","toPercent","decimal","fixed","toFixed","renderTooltipContent","o","payload","label","reduce","result","entry","map","index","color","name","PercentAreaChart","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\n\nconst data = [\n  {month: '2015.01', a: 4000, b: 2400, c: 2400},\n  {month: '2015.02', a: 3000, b: 1398, c: 2210},\n  {month: '2015.03', a: 2000, b: 9800, c: 2290},\n  {month: '2015.04', a: 2780, b: 3908, c: 2000},\n  {month: '2015.05', a: 1890, b: 4800, c: 2181},\n  {month: '2015.06', a: 2390, b: 3800, c: 2500},\n  {month: '2015.07', a: 3490, b: 4300, c: 2100},\n];\n\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = (decimal, fixed = 0) => {\n  return `${(decimal * 100).toFixed(fixed)}%`;\n};\nconst renderTooltipContent = (o) => {\n  const {payload, label} = o;\n  const total = payload.reduce((result, entry) => (result + entry.value), 0);\n\n  return (\n    <div className=\"customized-tooltip-content\">\n      <p className=\"total\">{`${label} (Total: ${total})`}</p>\n      <ul className=\"list\">\n        {\n          payload.map((entry, index) => (\n            <li key={`item-${index}`} style={{color: entry.color}}>\n              {`${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\nconst PercentAreaChart = () => (\n  <ResponsiveContainer width=\"100%\" height={200}>\n    <AreaChart data={data} stackOffset=\"expand\"\n               margin={{top: 10, right: 0, left: -25, bottom: 0}}>\n      <XAxis dataKey=\"month\"/>\n      <YAxis tickFormatter={toPercent}/>\n      <CartesianGrid strokeDasharray=\"3 3\"/>\n      <Tooltip content={renderTooltipContent}/>\n      <Area type='monotone' dataKey='a' stackId=\"1\" stroke='#3367d6' fill='#3367d6'/>\n      <Area type='monotone' dataKey='b' stackId=\"1\" stroke='#59AA2B' fill='#59AA2B'/>\n      <Area type='monotone' dataKey='c' stackId=\"1\" stroke='#ffc658' fill='#ffc658'/>\n    </AreaChart>\n  </ResponsiveContainer>\n);\n\nexport default PercentAreaChart;"]},"metadata":{},"sourceType":"module"}