{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/contact/basic/index.js\";\nimport React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport contactList from '../data/contactList';\nimport ContactList from 'components/contact/ContactList';\nimport AppModuleHeader from 'components/AppModuleHeader/index';\nimport AddContact from 'components/contact/AddContact';\nimport IntlMessages from 'util/IntlMessages';\nimport CustomScrollbars from 'util/CustomScrollbars';\nlet contactId = 723812738;\nconst filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'zmdi-menu'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'zmdi-time-restore'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'zmdi-star'\n}];\n\nclass Contact extends Component {\n  constructor() {\n    super();\n\n    this.ContactSideBar = user => {\n      return React.createElement(\"div\", {\n        className: \"module-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-side-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-account-box mr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"chat.contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"module-side-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(CustomScrollbars, {\n        className: \"module-side-scroll scrollbar\",\n        style: {\n          height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"module-add-task\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"jr-btn btn-block\",\n        variant: \"contained\",\n        color: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"zmdi zmdi-account-add zmdi-hc-fw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Add New Contact\"))), React.createElement(\"div\", {\n        className: \"module-side-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"module-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, filterOptions.map(option => React.createElement(\"li\", {\n        key: option.id,\n        className: \"nav-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: `jr-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`,\n        onClick: this.onFilterOptionSelect.bind(this, option),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `zmdi ${option.icon}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, option.name)))))))));\n    };\n\n    this.addFavourite = data => {\n      this.setState({\n        alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: this.state.contactList.map(contact => contact.id === data.id ? { ...contact,\n          starred: !data.starred\n        } : contact),\n        allContact: this.state.allContact.map(contact => contact.id === data.id ? { ...contact,\n          starred: !data.starred\n        } : contact)\n      });\n    };\n\n    this.onContactSelect = data => {\n      data.selected = !data.selected;\n      let selectedContacts = 0;\n      const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n      this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    };\n\n    this.onAddContact = () => {\n      this.setState({\n        addContactState: true\n      });\n    };\n\n    this.onContactClose = () => {\n      this.setState({\n        addContactState: false\n      });\n    };\n\n    this.onFilterOptionSelect = option => {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact\n            });\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact.filter(contact => contact.frequently)\n            });\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact.filter(contact => contact.starred)\n            });\n            break;\n          }\n\n        default:\n          {\n            this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: this.state.allContact\n            });\n          }\n      }\n    };\n\n    this.onSaveContact = data => {\n      let isNew = true;\n      const contactList = this.state.allContact.map(contact => {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n    };\n\n    this.onDeleteContact = data => {\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: this.state.allContact.filter(contact => contact.id !== data.id),\n        contactList: this.state.allContact.filter(contact => contact.id !== data.id)\n      });\n    };\n\n    this.onDeleteSelectedContact = () => {\n      const contacts = this.state.allContact.filter(contact => !contact.selected);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    };\n\n    this.filterContact = userName => {\n      const {\n        filterOption\n      } = this.state;\n\n      if (userName === '') {\n        this.setState({\n          contactList: this.state.allContact\n        });\n      } else {\n        const filterContact = this.state.allContact.filter(contact => contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n\n        if (filterOption === 'All contacts') {\n          this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.frequently)\n          });\n        } else if (filterOption === 'Starred contacts') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.starred)\n          });\n        }\n      }\n    };\n\n    this.handleRequestClose = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.getAllContact = () => {\n      let contactList = this.state.allContact.map(contact => contact ? { ...contact,\n        selected: true\n      } : contact);\n      this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    this.getUnselectedAllContact = () => {\n      let contactList = this.state.allContact.map(contact => contact ? { ...contact,\n        selected: false\n      } : contact);\n      this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    this.state = {\n      noContentFoundMessage: 'No contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value\n    });\n    this.filterContact(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      user,\n      contactList,\n      addContactState,\n      selectedContacts,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"app-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-module animated slideInUpTiny animation-duration-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-block d-xl-none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Drawer, {\n      open: this.state.drawerState,\n      onClose: this.onToggleDrawer.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, this.ContactSideBar(user))), React.createElement(\"div\", {\n      className: \"app-module-sidenav d-none d-xl-flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, this.ContactSideBar(user)), React.createElement(\"div\", {\n      className: \"module-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"module-box-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"drawer-btn d-block d-xl-none\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"zmdi zmdi-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    })), React.createElement(AppModuleHeader, {\n      placeholder: \"Search contact\",\n      notification: false,\n      apps: false,\n      user: this.state.user,\n      onChange: this.updateContactUser.bind(this),\n      value: this.state.searchUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"module-box-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"module-box-topbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      color: \"primary\",\n      indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n      checked: selectedContacts > 0,\n      onChange: this.onAllContactSelect.bind(this),\n      value: \"SelectMail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), selectedContacts > 0 && React.createElement(IconButton, {\n      className: \"icon-btn\",\n      onClick: this.onDeleteSelectedContact.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"zmdi zmdi-delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }))), React.createElement(CustomScrollbars, {\n      className: \"module-list-scroll scrollbar\",\n      style: {\n        height: this.props.width >= 1200 ? 'calc(100vh - 261px)' : 'calc(100vh - 240px)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, contactList.length === 0 ? React.createElement(\"div\", {\n      className: \"h-100 d-flex align-items-center justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, noContentFoundMessage) : React.createElement(ContactList, {\n      contactList: contactList,\n      addFavourite: this.addFavourite.bind(this),\n      onContactSelect: this.onContactSelect.bind(this),\n      onDeleteContact: this.onDeleteContact.bind(this),\n      onSaveContact: this.onSaveContact.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }))))), React.createElement(AddContact, {\n      open: addContactState,\n      contact: {\n        'id': contactId++,\n        'name': '',\n        'thumb': '',\n        'email': '',\n        'phone': '',\n        'designation': '',\n        'selected': false,\n        'starred': false,\n        'frequently': false\n      },\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: showMessage,\n      autoHideDuration: 3000,\n      onClose: this.handleRequestClose,\n      ContentProps: {\n        'aria-describedby': 'message-id'\n      },\n      message: React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, alertMessage),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = ({\n  settings\n}) => {\n  const {\n    width\n  } = settings;\n  return {\n    width\n  };\n};\n\nexport default connect(mapStateToProps)(Contact);","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/contact/basic/index.js"],"names":["React","Component","Drawer","IconButton","Checkbox","connect","Button","Snackbar","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","CustomScrollbars","contactId","filterOptions","id","name","icon","Contact","constructor","ContactSideBar","user","height","props","width","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","setState","alertMessage","starred","showMessage","contact","allContact","onContactSelect","selected","selectedContacts","addContactState","onContactClose","filterOption","filter","frequently","onSaveContact","isNew","push","onDeleteContact","onDeleteSelectedContact","contacts","filterContact","userName","toLowerCase","indexOf","handleRequestClose","getAllContact","length","getUnselectedAllContact","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","onAllContactSelect","selectAll","updateContactUser","evt","target","value","onToggleDrawer","render","vertical","horizontal","mapStateToProps","settings"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {connect} from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport contactList from '../data/contactList';\nimport ContactList from 'components/contact/ContactList';\nimport AppModuleHeader from 'components/AppModuleHeader/index';\nimport AddContact from 'components/contact/AddContact';\nimport IntlMessages from 'util/IntlMessages';\nimport CustomScrollbars from 'util/CustomScrollbars';\n\nlet contactId = 723812738;\n\nconst filterOptions = [\n  {\n    id: 1,\n    name: 'All contacts',\n    icon: 'zmdi-menu'\n  }, {\n    id: 2,\n    name: 'Frequently contacted',\n    icon: 'zmdi-time-restore'\n\n  }, {\n\n    id: 3,\n    name: 'Starred contacts',\n    icon: 'zmdi-star'\n  }\n];\n\nclass Contact extends Component {\n\n  ContactSideBar = (user) => {\n    return <div className=\"module-side\">\n      <div className=\"module-side-header\">\n        <div className=\"module-logo\">\n          <i className=\"zmdi zmdi-account-box mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"module-side-content\">\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\n          <div className=\"module-add-task\">\n            <Button className=\"jr-btn btn-block\" variant=\"contained\" color=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"zmdi zmdi-account-add zmdi-hc-fw\"/>\n              <span>Add New Contact</span>\n            </Button>\n          </div>\n          <div className=\"module-side-nav\">\n            <ul className=\"module-nav\">\n              {filterOptions.map(option => <li key={option.id} className=\"nav-item\">\n                  <span\n                    className={`jr-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\n                    this.onFilterOptionSelect.bind(this, option)\n                  }>\n                    <i className={`zmdi ${option.icon}`}/>\n                    <span>{option.name}</span>\n                  </span>\n                </li>\n              )}\n\n            </ul>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  addFavourite = (data) => {\n    this.setState({\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n      showMessage: true,\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\n        ...contact,\n        starred: !data.starred\n      } : contact),\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\n        ...contact,\n        starred: !data.starred\n      } : contact)\n    })\n  };\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onFilterOptionSelect = (option) => {\n    switch (option.name) {\n      case 'All contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n        break;\n      }\n      case 'Frequently contacted': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\n        });\n        break;\n      }\n      case 'Starred contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.starred)\n        });\n        break;\n      }\n      default: {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n      }\n    }\n\n  };\n  onSaveContact = (data) => {\n    let isNew = true;\n    const contactList = this.state.allContact.map((contact) => {\n      if (contact.id === data.id) {\n        isNew = false;\n        return data\n      } else {\n        return contact\n      }\n    });\n    if (isNew) {\n      contactList.push(data);\n    }\n    this.setState({\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n      showMessage: true,\n      contactList: contactList,\n      allContact: contactList\n    });\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = (data) => {\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    return (\n      <div className=\"app-wrapper\">\n        <div className=\"app-module animated slideInUpTiny animation-duration-3\">\n\n          <div className=\"d-block d-xl-none\">\n            <Drawer\n              open={this.state.drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar(user)}\n            </Drawer>\n          </div>\n          <div className=\"app-module-sidenav d-none d-xl-flex\">\n            {this.ContactSideBar(user)}\n          </div>\n\n          <div className=\"module-box\">\n            <div className=\"module-box-header\">\n              <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\n                          onClick={this.onToggleDrawer.bind(this)}>\n                <i className=\"zmdi zmdi-menu\"/>\n              </IconButton>\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"module-box-content\">\n\n              <div className=\"module-box-topbar\">\n                <Checkbox color=\"primary\"\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\n                          checked={selectedContacts > 0}\n                          onChange={this.onAllContactSelect.bind(this)}\n                          value=\"SelectMail\"/>\n\n\n                {selectedContacts > 0 &&\n                <IconButton className=\"icon-btn\"\n                            onClick={this.onDeleteSelectedContact.bind(this)}>\n                  <i className=\"zmdi zmdi-delete\"/>\n                </IconButton>}\n\n              </div>\n              <CustomScrollbars className=\"module-list-scroll scrollbar\"\n                                style={{height: this.props.width >= 1200 ? 'calc(100vh - 261px)' : 'calc(100vh - 240px)'}}>\n                {contactList.length === 0 ?\n                  <div className=\"h-100 d-flex align-items-center justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 addFavourite={this.addFavourite.bind(this)}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n        <Snackbar\n          anchorOrigin={{vertical: 'top', horizontal: 'center'}}\n          open={showMessage}\n          autoHideDuration={3000}\n          onClose={this.handleRequestClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{alertMessage}</span>}\n        /></div>\n    )\n  }\n}\n\nconst mapStateToProps = ({settings}) => {\n  const {width} = settings;\n  return {width}\n};\nexport default connect(mapStateToProps)(Contact);"]},"metadata":{},"sourceType":"module"}