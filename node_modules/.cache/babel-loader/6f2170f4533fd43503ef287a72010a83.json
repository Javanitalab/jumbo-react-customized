{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/stepper/nonLinear/HorizontalNonLinearAlternativeLabelStepper.js\";\nimport React from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nclass HorizontalNonLinearAlternativeLabelStepper extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeStep: 0,\n      completed: new Set(),\n      skipped: new Set()\n    };\n\n    this.totalSteps = () => {\n      return getSteps().length;\n    };\n\n    this.isStepOptional = step => {\n      return step === 1;\n    };\n\n    this.handleSkip = () => {\n      const {\n        activeStep\n      } = this.state;\n\n      if (!this.isStepOptional(activeStep)) {\n        // You probably want to guard against something like this\n        // it should never occur unless someone's actively trying to break something.\n        throw new Error(\"You can't skip a step that isn't optional.\");\n      }\n\n      const skipped = new Set(this.state.skipped);\n      skipped.add(activeStep);\n      this.setState({\n        activeStep: this.state.activeStep + 1,\n        skipped\n      });\n    };\n\n    this.handleNext = () => {\n      let activeStep;\n\n      if (this.isLastStep() && !this.allStepsCompleted()) {\n        // It's the last step, but not all steps have been completed\n        // find the first step that has been completed\n        const steps = getSteps();\n        activeStep = steps.findIndex((step, i) => !this.state.completed.has(i));\n      } else {\n        activeStep = this.state.activeStep + 1;\n      }\n\n      this.setState({\n        activeStep\n      });\n    };\n\n    this.handleBack = () => {\n      this.setState({\n        activeStep: this.state.activeStep - 1\n      });\n    };\n\n    this.handleStep = step => () => {\n      this.setState({\n        activeStep: step\n      });\n    };\n\n    this.handleComplete = () => {\n      const completed = new Set(this.state.completed);\n      completed.add(this.state.activeStep);\n      this.setState({\n        completed\n      });\n      /**\n       * Sigh... it would be much nicer to replace the following if conditional with\n       * `if (!this.allStepsComplete())` however state is not set when we do this,\n       * thus we have to resort to not being very DRY.\n       */\n\n      if (completed.size !== this.totalSteps() - this.skippedSteps()) {\n        this.handleNext();\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0,\n        completed: new Set(),\n        skipped: new Set()\n      });\n    };\n  }\n\n  isStepComplete(step) {\n    return this.state.completed.has(step);\n  }\n\n  completedSteps() {\n    return this.state.completed.size;\n  }\n\n  allStepsCompleted() {\n    return this.completedSteps() === this.totalSteps() - this.skippedSteps();\n  }\n\n  isLastStep() {\n    return this.state.activeStep === this.totalSteps() - 1;\n  }\n\n  isStepSkipped(step) {\n    return this.state.skipped.has(step);\n  }\n\n  skippedSteps() {\n    return this.state.skipped.size;\n  }\n\n  render() {\n    const steps = getSteps();\n    const {\n      activeStep\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"w-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      alternativeLabel: true,\n      nonLinear: true,\n      activeStep: activeStep,\n      className: \"horizontal-stepper-linear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, steps.map((label, index) => {\n      const props = {};\n      const labelProps = {};\n\n      if (this.isStepOptional(index)) {\n        labelProps.optional = React.createElement(Typography, {\n          variant: \"caption\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Optional\");\n      }\n\n      if (this.isStepSkipped(index)) {\n        props.completed = false;\n      }\n\n      return React.createElement(Step, Object.assign({\n        key: label,\n        className: `horizontal-stepper ${index === activeStep ? 'active' : ''}`\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(StepButton, Object.assign({\n        className: \"stepperbutton\",\n        onClick: this.handleStep(index),\n        completed: this.isStepComplete(index)\n      }, labelProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), label));\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.allStepsCompleted() ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"All steps completed - you\\\"re finished\"), React.createElement(Button, {\n      onClick: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Reset\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, getStepContent(activeStep)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: activeStep === 0,\n      onClick: this.handleBack,\n      className: \"jr-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: \"jr-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Next\"), this.isStepOptional(activeStep) && !this.state.completed.has(this.state.activeStep) && React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleSkip,\n      className: \"jr-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Skip\"), activeStep !== steps.length && (this.state.completed.has(this.state.activeStep) ? React.createElement(Typography, {\n      variant: \"caption\",\n      className: \"my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Step \", activeStep + 1, \" already completed\") : React.createElement(Button, {\n      className: \"jr-btn\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n  }\n\n}\n\nexport default HorizontalNonLinearAlternativeLabelStepper;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/components/routes/stepper/nonLinear/HorizontalNonLinearAlternativeLabelStepper.js"],"names":["React","Stepper","Step","StepButton","Button","Typography","getSteps","getStepContent","step","HorizontalNonLinearAlternativeLabelStepper","Component","state","activeStep","completed","Set","skipped","totalSteps","length","isStepOptional","handleSkip","Error","add","setState","handleNext","isLastStep","allStepsCompleted","steps","findIndex","i","has","handleBack","handleStep","handleComplete","size","skippedSteps","handleReset","isStepComplete","completedSteps","isStepSkipped","render","map","label","index","props","labelProps","optional"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAO,CAAC,0BAAD,EAA6B,oBAA7B,EAAmD,cAAnD,CAAP;AACD;;AAED,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,UAAQA,IAAR;AACE,SAAK,CAAL;AACE,aAAO,qCAAP;;AACF,SAAK,CAAL;AACE,aAAO,sCAAP;;AACF,SAAK,CAAL;AACE,aAAO,8CAAP;;AACF;AACE,aAAO,cAAP;AARJ;AAUD;;AAED,MAAMC,0CAAN,SAAyDT,KAAK,CAACU,SAA/D,CAAyE;AAAA;AAAA;AAAA,SACvEC,KADuE,GAC/D;AACNC,MAAAA,UAAU,EAAE,CADN;AAENC,MAAAA,SAAS,EAAE,IAAIC,GAAJ,EAFL;AAGNC,MAAAA,OAAO,EAAE,IAAID,GAAJ;AAHH,KAD+D;;AAAA,SAOvEE,UAPuE,GAO1D,MAAM;AACjB,aAAOV,QAAQ,GAAGW,MAAlB;AACD,KATsE;;AAAA,SAUvEC,cAVuE,GAUtDV,IAAI,IAAI;AACvB,aAAOA,IAAI,KAAK,CAAhB;AACD,KAZsE;;AAAA,SAavEW,UAbuE,GAa1D,MAAM;AACjB,YAAM;AAACP,QAAAA;AAAD,UAAe,KAAKD,KAA1B;;AACA,UAAI,CAAC,KAAKO,cAAL,CAAoBN,UAApB,CAAL,EAAsC;AACpC;AACA;AACA,cAAM,IAAIQ,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,YAAML,OAAO,GAAG,IAAID,GAAJ,CAAQ,KAAKH,KAAL,CAAWI,OAAnB,CAAhB;AACAA,MAAAA,OAAO,CAACM,GAAR,CAAYT,UAAZ;AACA,WAAKU,QAAL,CAAc;AACZV,QAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UAAX,GAAwB,CADxB;AAEZG,QAAAA;AAFY,OAAd;AAID,KA1BsE;;AAAA,SA2BvEQ,UA3BuE,GA2B1D,MAAM;AACjB,UAAIX,UAAJ;;AAEA,UAAI,KAAKY,UAAL,MAAqB,CAAC,KAAKC,iBAAL,EAA1B,EAAoD;AAClD;AACA;AACA,cAAMC,KAAK,GAAGpB,QAAQ,EAAtB;AACAM,QAAAA,UAAU,GAAGc,KAAK,CAACC,SAAN,CAAgB,CAACnB,IAAD,EAAOoB,CAAP,KAAa,CAAC,KAAKjB,KAAL,CAAWE,SAAX,CAAqBgB,GAArB,CAAyBD,CAAzB,CAA9B,CAAb;AACD,OALD,MAKO;AACLhB,QAAAA,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAAX,GAAwB,CAArC;AACD;;AACD,WAAKU,QAAL,CAAc;AACZV,QAAAA;AADY,OAAd;AAGD,KAzCsE;;AAAA,SA0CvEkB,UA1CuE,GA0C1D,MAAM;AACjB,WAAKR,QAAL,CAAc;AACZV,QAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UAAX,GAAwB;AADxB,OAAd;AAGD,KA9CsE;;AAAA,SA+CvEmB,UA/CuE,GA+C1DvB,IAAI,IAAI,MAAM;AACzB,WAAKc,QAAL,CAAc;AACZV,QAAAA,UAAU,EAAEJ;AADA,OAAd;AAGD,KAnDsE;;AAAA,SAoDvEwB,cApDuE,GAoDtD,MAAM;AACrB,YAAMnB,SAAS,GAAG,IAAIC,GAAJ,CAAQ,KAAKH,KAAL,CAAWE,SAAnB,CAAlB;AACAA,MAAAA,SAAS,CAACQ,GAAV,CAAc,KAAKV,KAAL,CAAWC,UAAzB;AACA,WAAKU,QAAL,CAAc;AACZT,QAAAA;AADY,OAAd;AAGA;;;;;;AAKA,UAAIA,SAAS,CAACoB,IAAV,KAAmB,KAAKjB,UAAL,KAAoB,KAAKkB,YAAL,EAA3C,EAAgE;AAC9D,aAAKX,UAAL;AACD;AACF,KAlEsE;;AAAA,SAmEvEY,WAnEuE,GAmEzD,MAAM;AAClB,WAAKb,QAAL,CAAc;AACZV,QAAAA,UAAU,EAAE,CADA;AAEZC,QAAAA,SAAS,EAAE,IAAIC,GAAJ,EAFC;AAGZC,QAAAA,OAAO,EAAE,IAAID,GAAJ;AAHG,OAAd;AAKD,KAzEsE;AAAA;;AA2EvEsB,EAAAA,cAAc,CAAC5B,IAAD,EAAO;AACnB,WAAO,KAAKG,KAAL,CAAWE,SAAX,CAAqBgB,GAArB,CAAyBrB,IAAzB,CAAP;AACD;;AAED6B,EAAAA,cAAc,GAAG;AACf,WAAO,KAAK1B,KAAL,CAAWE,SAAX,CAAqBoB,IAA5B;AACD;;AAEDR,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKY,cAAL,OAA0B,KAAKrB,UAAL,KAAoB,KAAKkB,YAAL,EAArD;AACD;;AAEDV,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKb,KAAL,CAAWC,UAAX,KAA0B,KAAKI,UAAL,KAAoB,CAArD;AACD;;AAEDsB,EAAAA,aAAa,CAAC9B,IAAD,EAAO;AAClB,WAAO,KAAKG,KAAL,CAAWI,OAAX,CAAmBc,GAAnB,CAAuBrB,IAAvB,CAAP;AACD;;AAED0B,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKvB,KAAL,CAAWI,OAAX,CAAmBkB,IAA1B;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAMb,KAAK,GAAGpB,QAAQ,EAAtB;AACA,UAAM;AAACM,MAAAA;AAAD,QAAe,KAAKD,KAA1B;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,gBAAgB,MAAzB;AAA0B,MAAA,SAAS,MAAnC;AAAoC,MAAA,UAAU,EAAEC,UAAhD;AAA4D,MAAA,SAAS,EAAC,2BAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGc,KAAK,CAACc,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,YAAMC,KAAK,GAAG,EAAd;AACA,YAAMC,UAAU,GAAG,EAAnB;;AACA,UAAI,KAAK1B,cAAL,CAAoBwB,KAApB,CAAJ,EAAgC;AAC9BE,QAAAA,UAAU,CAACC,QAAX,GAAsB,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAtB;AACD;;AACD,UAAI,KAAKP,aAAL,CAAmBI,KAAnB,CAAJ,EAA+B;AAC7BC,QAAAA,KAAK,CAAC9B,SAAN,GAAkB,KAAlB;AACD;;AACD,aACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAE4B,KAAX;AACM,QAAA,SAAS,EAAG,sBAAqBC,KAAK,KAAK9B,UAAV,GAAuB,QAAvB,GAAkC,EAAG;AAD5E,SACmF+B,KADnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAEE,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAC,eAAtB;AAAsC,QAAA,OAAO,EAAE,KAAKZ,UAAL,CAAgBW,KAAhB,CAA/C;AACY,QAAA,SAAS,EAAE,KAAKN,cAAL,CAAoBM,KAApB;AADvB,SACsDE,UADtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAEGH,KAFH,CAFF,CADF;AASD,KAlBA,CADH,CADF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKhB,iBAAL,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,EAIE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKU,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADD,GAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B5B,cAAc,CAACK,UAAD,CAA5C,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAEA,UAAU,KAAK,CAD3B;AAEE,MAAA,OAAO,EAAE,KAAKkB,UAFhB;AAGE,MAAA,SAAS,EAAC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAQE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,OAAO,EAAE,KAAKP,UAA1D;AAAsE,MAAA,SAAS,EAAC,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EAWG,KAAKL,cAAL,CAAoBN,UAApB,KACD,CAAC,KAAKD,KAAL,CAAWE,SAAX,CAAqBgB,GAArB,CAAyB,KAAKlB,KAAL,CAAWC,UAApC,CADA,IAEC,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAE,KAAKO,UAHhB;AAIE,MAAA,SAAS,EAAC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,EAsBGP,UAAU,KAAKc,KAAK,CAACT,MAArB,KACA,KAAKN,KAAL,CAAWE,SAAX,CAAqBgB,GAArB,CAAyB,KAAKlB,KAAL,CAAWC,UAApC,IACC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAA8B,MAAA,SAAS,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQA,UAAU,GAAG,CADrB,uBADD,GAKC,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAC,WAAnC;AAA+C,MAAA,KAAK,EAAC,SAArD;AACQ,MAAA,OAAO,EAAE,KAAKoB,cADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKK,cAAL,OAA0B,KAAKrB,UAAL,KAAoB,CAA9C,GAAkD,QAAlD,GAA6D,eAFhE,CAND,CAtBH,CAFF,CATJ,CAtBF,CADF;AAyED;;AAhLsE;;AAmLzE,eAAeP,0CAAf","sourcesContent":["import React from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nclass HorizontalNonLinearAlternativeLabelStepper extends React.Component {\n  state = {\n    activeStep: 0,\n    completed: new Set(),\n    skipped: new Set(),\n  };\n\n  totalSteps = () => {\n    return getSteps().length;\n  };\n  isStepOptional = step => {\n    return step === 1;\n  };\n  handleSkip = () => {\n    const {activeStep} = this.state;\n    if (!this.isStepOptional(activeStep)) {\n      // You probably want to guard against something like this\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n    const skipped = new Set(this.state.skipped);\n    skipped.add(activeStep);\n    this.setState({\n      activeStep: this.state.activeStep + 1,\n      skipped,\n    });\n  };\n  handleNext = () => {\n    let activeStep;\n\n    if (this.isLastStep() && !this.allStepsCompleted()) {\n      // It's the last step, but not all steps have been completed\n      // find the first step that has been completed\n      const steps = getSteps();\n      activeStep = steps.findIndex((step, i) => !this.state.completed.has(i));\n    } else {\n      activeStep = this.state.activeStep + 1;\n    }\n    this.setState({\n      activeStep,\n    });\n  };\n  handleBack = () => {\n    this.setState({\n      activeStep: this.state.activeStep - 1,\n    });\n  };\n  handleStep = step => () => {\n    this.setState({\n      activeStep: step,\n    });\n  };\n  handleComplete = () => {\n    const completed = new Set(this.state.completed);\n    completed.add(this.state.activeStep);\n    this.setState({\n      completed,\n    });\n    /**\n     * Sigh... it would be much nicer to replace the following if conditional with\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\n     * thus we have to resort to not being very DRY.\n     */\n    if (completed.size !== this.totalSteps() - this.skippedSteps()) {\n      this.handleNext();\n    }\n  };\n  handleReset = () => {\n    this.setState({\n      activeStep: 0,\n      completed: new Set(),\n      skipped: new Set(),\n    });\n  };\n\n  isStepComplete(step) {\n    return this.state.completed.has(step);\n  }\n\n  completedSteps() {\n    return this.state.completed.size;\n  }\n\n  allStepsCompleted() {\n    return this.completedSteps() === this.totalSteps() - this.skippedSteps();\n  }\n\n  isLastStep() {\n    return this.state.activeStep === this.totalSteps() - 1;\n  }\n\n  isStepSkipped(step) {\n    return this.state.skipped.has(step);\n  }\n\n  skippedSteps() {\n    return this.state.skipped.size;\n  }\n\n  render() {\n    const steps = getSteps();\n    const {activeStep} = this.state;\n\n    return (\n      <div className=\"w-100\">\n        <Stepper alternativeLabel nonLinear activeStep={activeStep} className=\"horizontal-stepper-linear\">\n          {steps.map((label, index) => {\n            const props = {};\n            const labelProps = {};\n            if (this.isStepOptional(index)) {\n              labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n            }\n            if (this.isStepSkipped(index)) {\n              props.completed = false;\n            }\n            return (\n              <Step key={label}\n                    className={`horizontal-stepper ${index === activeStep ? 'active' : ''}`} {...props}>\n                <StepButton className=\"stepperbutton\" onClick={this.handleStep(index)}\n                            completed={this.isStepComplete(index)}{...labelProps}>\n                  {label}\n                </StepButton>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <div>\n          {this.allStepsCompleted() ? (\n            <div>\n              <Typography className=\"my-2\">\n                All steps completed - you&quot;re finished\n              </Typography>\n              <Button onClick={this.handleReset}>Reset</Button>\n            </div>\n          ) : (\n            <div>\n              <Typography className=\"my-2\">{getStepContent(activeStep)}</Typography>\n              <div>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={this.handleBack}\n                  className=\"jr-btn\"\n                >\n                  Back\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleNext} className=\"jr-btn\">\n                  Next\n                </Button>\n                {this.isStepOptional(activeStep) &&\n                !this.state.completed.has(this.state.activeStep) && (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.handleSkip}\n                    className=\"jr-btn\"\n                  >\n                    Skip\n                  </Button>\n                )}\n                {activeStep !== steps.length &&\n                (this.state.completed.has(this.state.activeStep) ? (\n                  <Typography variant=\"caption\" className=\"my-2\">\n                    Step {activeStep + 1} already completed\n                  </Typography>\n                ) : (\n                  <Button className=\"jr-btn\" variant=\"contained\" color=\"primary\"\n                          onClick={this.handleComplete}>\n                    {this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step'}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HorizontalNonLinearAlternativeLabelStepper;"]},"metadata":{},"sourceType":"module"}