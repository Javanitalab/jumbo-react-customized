{"ast":null,"code":"import { FETCH_ALL_MAIL_SUCCESS, GET_ALL_MAIL, GET_IMPORTANT_MAIL, GET_NAV_FILTERS, GET_NAV_FOLDER, GET_NAV_LABELS, GET_READ_MAIL, GET_STARRED_MAIL, GET_UNIMPORTANT_MAIL, GET_UNREAD_MAIL, GET_UNSELECTED_ALL_MAIL, GET_UNSTARRED_MAIL, HANDLE_REQUEST_CLOSE, ON_ALL_MAIL_SELECT, ON_COMPOSE_MAIL, ON_DELETE_MAIL, ON_FOLDER_MENU_ITEM_SELECT, ON_FOLDER_SELECT, ON_HIDE_LOADER, ON_IMPORTANT_SELECT, ON_LABEL_MENU_ITEM_SELECT, ON_LABEL_SELECT, ON_MAIL_CHECKED, ON_MAIL_SELECT, ON_MAIL_SEND, ON_OPTION_MENU_SELECT, ON_START_SELECT, ON_TOGGLE_DRAWER, SEARCH_MAIL, SET_CURRENT_MAIL_NULL, SHOW_MESSAGE, UPDATE_SEARCH } from 'constants/ActionTypes';\nimport mails from 'app/routes/mail/data/mails';\nconst INIT_STATE = {\n  searchMail: '',\n  noContentFoundMessage: 'No mail found in selected folder',\n  alertMessage: '',\n  showMessage: false,\n  drawerState: false,\n  anchorEl: null,\n  // allMail: [], only for prod\n  allMail: mails,\n  optionName: 'None',\n  loader: true,\n  currentMail: null,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  selectedMails: 0,\n  selectedFolder: 0,\n  composeMail: false,\n  labelMenuState: false,\n  folderMenuState: false,\n  optionMenuState: false,\n  // folderMails: [], //only for prod\n  folderMails: mails.filter(mail => mail.folder === 0)\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_ALL_MAIL:\n      {\n        let mails = state.allMail.map(mail => mail.folder === state.selectedFolder ? { ...mail,\n          selected: true\n        } : mail);\n        return { ...state,\n          selectedMails: mails.length,\n          optionName: 'All',\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case FETCH_ALL_MAIL_SUCCESS:\n      {\n        return { ...state,\n          loader: false,\n          allMail: action.payload,\n          folderMails: action.payload.filter(mail => mail.folder === 0)\n        };\n      }\n\n    case GET_IMPORTANT_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.important) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          optionName: 'Important',\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_NAV_FILTERS:\n      {\n        const filterMails = state.allMail.filter(mail => {\n          if (action.payload.id === 0 && mail.starred) {\n            return mail;\n          } else if (action.payload.id === 1 && mail.important) {\n            return mail;\n          } else return mail;\n        });\n        return { ...state,\n          noContentFoundMessage: 'No mail found in selected filter',\n          loader: true,\n          folderMails: filterMails\n        };\n      }\n\n    case ON_FOLDER_SELECT:\n      {\n        return { ...state,\n          folderMenuState: !state.folderMenuState\n        };\n      }\n\n    case GET_NAV_LABELS:\n      {\n        const filterMails = state.allMail.filter(mail => mail.labels.includes(action.payload.id));\n        return { ...state,\n          loader: true,\n          noContentFoundMessage: 'No mail found in selected label',\n          folderMails: filterMails\n        };\n      }\n\n    case GET_READ_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.read) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: 'Read',\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_STARRED_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.starred) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: 'Stared',\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNIMPORTANT_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.important) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: 'Unimportant',\n          noContentFoundMessage: 'No Mail found in selected Label',\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNREAD_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.read) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: 'Unread',\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNSELECTED_ALL_MAIL:\n      {\n        let mails = state.allMail.map(mail => mail.folder === state.selectedFolder ? { ...mail,\n          selected: false\n        } : mail);\n        return { ...state,\n          selectedMails: 0,\n          optionName: 'None',\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNSTARRED_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.starred) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          optionName: 'UnStarred',\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case HANDLE_REQUEST_CLOSE:\n      {\n        return { ...state,\n          composeMail: false,\n          showMessage: false,\n          folderMenuState: false,\n          labelMenuState: false,\n          optionMenuState: false\n        };\n      }\n\n    case ON_ALL_MAIL_SELECT:\n      {\n        return { ...state\n        };\n      }\n\n    case ON_FOLDER_MENU_ITEM_SELECT:\n      {\n        const mails = state.allMail.map(mail => mail.selected && mail.folder === state.selectedFolder ? { ...mail,\n          folder: action.payload,\n          selected: false\n        } : mail);\n        return { ...state,\n          selectedMails: 0,\n          allMail: mails,\n          noContentFoundMessage: 'No mail found in selected folder',\n          alertMessage: 'Mail has been moved successfully',\n          showMessage: true,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_IMPORTANT_SELECT:\n      {\n        action.payload.important = !action.payload.important;\n        return { ...state,\n          alertMessage: action.payload.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n          showMessage: true,\n          folderMails: state.folderMails.map(mail => mail.id === action.payload.id ? action.payload : mail)\n        };\n      }\n\n    case ON_LABEL_MENU_ITEM_SELECT:\n      {\n        let currentMail = state.currentMail;\n        const mails = state.allMail.map(mail => {\n          if (mail.selected && mail.folder === state.selectedFolder) {\n            if (mail.labels.includes(action.payload.id)) {\n              mail.labels.splice(mail.labels.indexOf(action.payload.id), 1);\n\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n\n              return { ...mail,\n                labels: mail.labels\n              };\n            } else {\n              mail.labels = mail.labels.concat(action.payload.id);\n\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n\n              return { ...mail,\n                labels: mail.labels\n              };\n            }\n          } else {\n            return mail;\n          }\n        });\n        return { ...state,\n          currentMail: currentMail,\n          noContentFoundMessage: 'No mail found in selected label',\n          alertMessage: 'Label Updated Successfully',\n          showMessage: true,\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_LABEL_SELECT:\n      {\n        return { ...state,\n          labelMenuState: !state.labelMenuState\n        };\n      }\n\n    case ON_MAIL_CHECKED:\n      {\n        action.payload.selected = !action.payload.selected;\n        let selectedMail = 0;\n        const mails = state.folderMails.map(mail => {\n          if (mail.selected) {\n            selectedMail++;\n          }\n\n          if (mail.id === action.payload.id) {\n            if (mail.selected) {\n              selectedMail++;\n            }\n\n            return action.payload;\n          } else {\n            return mail;\n          }\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          folderMails: mails\n        };\n      }\n\n    case ON_MAIL_SELECT:\n      {\n        return { ...state,\n          loader: true,\n          currentMail: action.payload\n        };\n      }\n\n    case ON_MAIL_SEND:\n      {\n        return { ...state,\n          alertMessage: 'Mail Sent Successfully',\n          showMessage: true,\n          folderMails: state.allMail.concat(action.payload),\n          allMail: state.allMail.concat(action.payload)\n        };\n      }\n\n    case ON_OPTION_MENU_SELECT:\n      {\n        return { ...state,\n          optionMenuState: !state.optionMenuState\n        };\n      }\n\n    case GET_NAV_FOLDER:\n      {\n        const filterMails = state.allMail.filter(mail => mail.folder === action.payload.id);\n        return { ...state,\n          selectedFolder: action.payload.id,\n          noContentFoundMessage: 'No mail found in selected folder',\n          currentMail: null,\n          loader: true,\n          folderMails: filterMails\n        };\n      }\n\n    case ON_START_SELECT:\n      {\n        action.payload.starred = !action.payload.starred;\n        return { ...state,\n          alertMessage: action.payload.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n          showMessage: true,\n          folderMails: state.folderMails.map(mail => mail.id === action.payload.id ? action.payload : mail)\n        };\n      }\n\n    case SEARCH_MAIL:\n      {\n        if (action.payload === '') {\n          return { ...state,\n            folderMails: state.allMail.filter(mail => !mail.deleted)\n          };\n        } else {\n          const searchMails = state.allMail.filter(mail => !mail.deleted && mail.subject.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n          return { ...state,\n            folderMails: searchMails\n          };\n        }\n      }\n\n    case UPDATE_SEARCH:\n      {\n        return { ...state,\n          searchMail: action.payload\n        };\n      }\n\n    case ON_HIDE_LOADER:\n      {\n        return { ...state,\n          loader: false\n        };\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return { ...state,\n          drawerState: !state.drawerState\n        };\n      }\n\n    case SET_CURRENT_MAIL_NULL:\n      {\n        return { ...state,\n          currentMail: null\n        };\n      }\n\n    case ON_DELETE_MAIL:\n      {\n        const mails = state.allMail.map(mail => mail.selected && mail.folder === state.selectedFolder ? { ...mail,\n          folder: 4,\n          selected: false\n        } : mail);\n        return { ...state,\n          alertMessage: 'Mail Deleted Successfully',\n          showMessage: true,\n          selectedMails: 0,\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_COMPOSE_MAIL:\n      {\n        return { ...state,\n          composeMail: true\n        };\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/reducers/Mail.js"],"names":["FETCH_ALL_MAIL_SUCCESS","GET_ALL_MAIL","GET_IMPORTANT_MAIL","GET_NAV_FILTERS","GET_NAV_FOLDER","GET_NAV_LABELS","GET_READ_MAIL","GET_STARRED_MAIL","GET_UNIMPORTANT_MAIL","GET_UNREAD_MAIL","GET_UNSELECTED_ALL_MAIL","GET_UNSTARRED_MAIL","HANDLE_REQUEST_CLOSE","ON_ALL_MAIL_SELECT","ON_COMPOSE_MAIL","ON_DELETE_MAIL","ON_FOLDER_MENU_ITEM_SELECT","ON_FOLDER_SELECT","ON_HIDE_LOADER","ON_IMPORTANT_SELECT","ON_LABEL_MENU_ITEM_SELECT","ON_LABEL_SELECT","ON_MAIL_CHECKED","ON_MAIL_SELECT","ON_MAIL_SEND","ON_OPTION_MENU_SELECT","ON_START_SELECT","ON_TOGGLE_DRAWER","SEARCH_MAIL","SET_CURRENT_MAIL_NULL","SHOW_MESSAGE","UPDATE_SEARCH","mails","INIT_STATE","searchMail","noContentFoundMessage","alertMessage","showMessage","drawerState","anchorEl","allMail","optionName","loader","currentMail","user","name","email","avatar","selectedMails","selectedFolder","composeMail","labelMenuState","folderMenuState","optionMenuState","folderMails","filter","mail","folder","state","action","type","map","selected","length","payload","selectedMail","important","filterMails","id","starred","labels","includes","read","splice","indexOf","concat","deleted","searchMails","subject","toLowerCase"],"mappings":"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","sourcesContent":["import {\n  FETCH_ALL_MAIL_SUCCESS,\n  GET_ALL_MAIL,\n  GET_IMPORTANT_MAIL,\n  GET_NAV_FILTERS,\n  GET_NAV_FOLDER,\n  GET_NAV_LABELS,\n  GET_READ_MAIL,\n  GET_STARRED_MAIL,\n  GET_UNIMPORTANT_MAIL,\n  GET_UNREAD_MAIL,\n  GET_UNSELECTED_ALL_MAIL,\n  GET_UNSTARRED_MAIL,\n  HANDLE_REQUEST_CLOSE,\n  ON_ALL_MAIL_SELECT,\n  ON_COMPOSE_MAIL,\n  ON_DELETE_MAIL,\n  ON_FOLDER_MENU_ITEM_SELECT,\n  ON_FOLDER_SELECT,\n  ON_HIDE_LOADER,\n  ON_IMPORTANT_SELECT,\n  ON_LABEL_MENU_ITEM_SELECT,\n  ON_LABEL_SELECT,\n  ON_MAIL_CHECKED,\n  ON_MAIL_SELECT,\n  ON_MAIL_SEND,\n  ON_OPTION_MENU_SELECT,\n  ON_START_SELECT,\n  ON_TOGGLE_DRAWER,\n  SEARCH_MAIL,\n  SET_CURRENT_MAIL_NULL,\n  SHOW_MESSAGE,\n  UPDATE_SEARCH\n} from 'constants/ActionTypes';\nimport mails from 'app/routes/mail/data/mails'\n\nconst INIT_STATE = {\n  searchMail: '',\n  noContentFoundMessage: 'No mail found in selected folder',\n  alertMessage: '',\n  showMessage: false,\n  drawerState: false,\n  anchorEl: null,\n  // allMail: [], only for prod\n  allMail: mails,\n  optionName: 'None',\n  loader: true,\n  currentMail: null,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  selectedMails: 0,\n  selectedFolder: 0,\n  composeMail: false,\n  labelMenuState: false,\n  folderMenuState: false,\n  optionMenuState: false,\n  // folderMails: [], //only for prod\n  folderMails: mails.filter(mail => mail.folder === 0)\n\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_ALL_MAIL: {\n      let mails = state.allMail.map((mail) => mail.folder === state.selectedFolder ? {\n        ...mail,\n        selected: true\n      } : mail);\n      return {\n        ...state,\n        selectedMails: mails.length,\n        optionName: 'All',\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case FETCH_ALL_MAIL_SUCCESS: {\n      return {\n        ...state,\n        loader: false,\n        allMail: action.payload,\n        folderMails: action.payload.filter(mail => mail.folder === 0)\n      }\n    }\n    case GET_IMPORTANT_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (mail.important) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_NAV_FILTERS: {\n      const filterMails = state.allMail.filter(mail => {\n        if (action.payload.id === 0 && mail.starred) {\n          return mail\n        } else if (action.payload.id === 1 && mail.important) {\n          return mail\n        } else return mail;\n      });\n      return {\n        ...state,\n        noContentFoundMessage: 'No mail found in selected filter',\n        loader: true,\n        folderMails: filterMails\n      }\n    }\n    case ON_FOLDER_SELECT: {\n      return {...state, folderMenuState: !state.folderMenuState}\n    }\n    case GET_NAV_LABELS: {\n      const filterMails = state.allMail.filter(mail => mail.labels.includes(action.payload.id));\n      return {\n        ...state,\n        loader: true,\n        noContentFoundMessage: 'No mail found in selected label',\n        folderMails: filterMails\n      }\n    }\n    case GET_READ_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (mail.read) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: 'Read',\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_STARRED_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (mail.starred) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: 'Stared',\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_UNIMPORTANT_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (!mail.important) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_UNREAD_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (!mail.read) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: 'Unread',\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_UNSELECTED_ALL_MAIL: {\n      let mails = state.allMail.map((mail) => mail.folder === state.selectedFolder ? {\n        ...mail,\n        selected: false\n      } : mail);\n      return {\n        ...state,\n        selectedMails: 0,\n        optionName: 'None',\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case GET_UNSTARRED_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n      mails = mails.map((mail) => {\n        if (!mail.starred) {\n          selectedMail++;\n          return {...mail, selected: true};\n        }\n        return {...mail, selected: false}\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case HANDLE_REQUEST_CLOSE: {\n      return {\n        ...state,\n        composeMail: false,\n        showMessage: false,\n        folderMenuState: false,\n        labelMenuState: false,\n        optionMenuState: false\n      }\n    }\n    case ON_ALL_MAIL_SELECT: {\n      return {...state}\n    }\n    case ON_FOLDER_MENU_ITEM_SELECT: {\n      const mails = state.allMail.map(mail =>\n        mail.selected && (mail.folder === state.selectedFolder) ?\n          {...mail, folder: action.payload, selected: false,} : mail\n      );\n\n      return {\n        ...state,\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case ON_IMPORTANT_SELECT: {\n      action.payload.important = !action.payload.important;\n      return {\n        ...state,\n        alertMessage: action.payload.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n        showMessage: true,\n        folderMails: state.folderMails.map(mail =>\n          mail.id === action.payload.id ?\n            action.payload : mail\n        )\n      }\n    }\n    case ON_LABEL_MENU_ITEM_SELECT: {\n      let currentMail = state.currentMail;\n      const mails = state.allMail.map(mail => {\n          if (mail.selected && (mail.folder === state.selectedFolder)) {\n            if (mail.labels.includes(action.payload.id)) {\n              mail.labels.splice(mail.labels.indexOf(action.payload.id), 1);\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n              return {...mail, labels: mail.labels};\n            } else {\n              mail.labels = mail.labels.concat(action.payload.id);\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n              return {...mail, labels: mail.labels};\n            }\n          } else {\n            return mail;\n          }\n        }\n      );\n\n      return {\n        ...state,\n        currentMail: currentMail,\n        noContentFoundMessage: 'No mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case ON_LABEL_SELECT: {\n      return {...state, labelMenuState: !state.labelMenuState}\n    }\n    case ON_MAIL_CHECKED: {\n      action.payload.selected = !action.payload.selected;\n      let selectedMail = 0;\n      const mails = state.folderMails.map(mail => {\n          if (mail.selected) {\n            selectedMail++;\n          }\n          if (mail.id === action.payload.id) {\n            if (mail.selected) {\n              selectedMail++;\n            }\n            return action.payload;\n          } else {\n            return mail;\n          }\n        }\n      );\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        folderMails: mails\n      }\n    }\n\n    case ON_MAIL_SELECT: {\n      return {\n        ...state,\n        loader: true,\n        currentMail: action.payload\n      }\n    }\n    case ON_MAIL_SEND: {\n      return {\n        ...state,\n        alertMessage: 'Mail Sent Successfully',\n        showMessage: true,\n        folderMails: state.allMail.concat(action.payload),\n        allMail: state.allMail.concat(action.payload)\n      }\n    }\n    case ON_OPTION_MENU_SELECT: {\n      return {...state, optionMenuState: !state.optionMenuState}\n    }\n    case GET_NAV_FOLDER: {\n      const filterMails = state.allMail.filter(mail => mail.folder === action.payload.id);\n      return {\n        ...state,\n        selectedFolder: action.payload.id,\n        noContentFoundMessage: 'No mail found in selected folder',\n        currentMail: null,\n        loader: true,\n        folderMails: filterMails\n      }\n    }\n\n    case ON_START_SELECT: {\n      action.payload.starred = !action.payload.starred;\n      return {\n        ...state,\n        alertMessage: action.payload.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n        showMessage: true,\n        folderMails: state.folderMails.map(mail =>\n          mail.id === action.payload.id ?\n            action.payload : mail\n        )\n      }\n    }\n\n    case SEARCH_MAIL: {\n      if (action.payload === '') {\n        return {...state, folderMails: state.allMail.filter((mail) => !mail.deleted)};\n      } else {\n        const searchMails = state.allMail.filter((mail) =>\n          !mail.deleted && mail.subject.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n        return {\n          ...state,\n          folderMails: searchMails\n        };\n      }\n\n    }\n\n    case UPDATE_SEARCH: {\n      return {...state, searchMail: action.payload}\n    }\n    case ON_HIDE_LOADER: {\n      return {...state, loader: false}\n    }\n    case ON_TOGGLE_DRAWER: {\n      return {...state, drawerState: !state.drawerState}\n    }\n    case SET_CURRENT_MAIL_NULL: {\n      return {...state, currentMail: null}\n    }\n    case ON_DELETE_MAIL: {\n\n      const mails = state.allMail.map(mail =>\n        mail.selected && (mail.folder === state.selectedFolder) ?\n          {...mail, folder: 4, selected: false,} : mail\n      );\n\n      return {\n        ...state,\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      }\n    }\n    case ON_COMPOSE_MAIL: {\n      return {...state, composeMail: true}\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      }\n    }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}