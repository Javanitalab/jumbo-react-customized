{"ast":null,"code":"import arrayMove from 'array-move';\nimport todoConversation from 'app/routes/todo/data/todoConversation';\nimport toDos from 'app/routes/todo/data/todo';\nimport { FETCH_ALL_TODO_CONVERSATION_SUCCESS, FETCH_ALL_TODO_SUCCESS, GET_ALL_TODO, GET_IMPORTANT_TODO, GET_MARK_AS_START, GET_NAV_FILTERS, GET_NAV_LABELS, GET_STARRED_TODO, GET_TODO_CONVERSATION, GET_UNIMPORTANT_TODO, GET_UNSELECTED_ALL_TODO, GET_UNSTARRED_TODO, HANDLE_REQUEST_CLOSE, ON_DELETE_TODO, ON_HIDE_LOADER, ON_LABEL_MENU_ITEM_SELECT, ON_LABEL_SELECT, ON_LABEL_UPDATE, ON_OPTION_MENU_ITEM_SELECT, ON_OPTION_MENU_SELECT, ON_SORTEND, ON_TODO_ADD, ON_TODO_CHECKED, ON_TODO_SELECT, ON_TODO_UPDATE, ON_TOGGLE_DRAWER, SEARCH_TODO, SELECT_ALL_TODO, SET_CURRENT_TODO_NULL, SHOW_MESSAGE, SHOW_TODOS, UPDATE_SEARCH } from 'constants/ActionTypes';\nconst INIT_STATE = {\n  searchTodo: '',\n  alertMessage: '',\n  loader: true,\n  showMessage: false,\n  optionName: 'None',\n  drawerState: false,\n  // allToDos: [],\n  allToDos: toDos,\n  currentTodo: null,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert.johnson@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  selectedToDos: 0,\n  labelMenuState: false,\n  optionMenuState: false,\n  // toDos: [],\n  toDos: toDos,\n  filter: -1,\n  // todoConversation: [],\n  todoConversation,\n  conversation: null\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    case ON_SORTEND:\n      {\n        return { ...state,\n          toDos: arrayMove(state.toDos, action.payload.oldIndex, action.payload.newIndex)\n        };\n      }\n\n    case ON_LABEL_SELECT:\n      {\n        return { ...state,\n          labelMenuState: !state.labelMenuState\n        };\n      }\n\n    case ON_OPTION_MENU_SELECT:\n      {\n        return { ...state,\n          optionMenuState: !state.optionMenuState\n        };\n      }\n\n    case ON_OPTION_MENU_ITEM_SELECT:\n      {\n        return { ...state\n        };\n      }\n\n    case SELECT_ALL_TODO:\n      {\n        let toDos = state.allToDos.map(todo => todo ? { ...todo,\n          selected: true\n        } : todo);\n        return { ...state,\n          selectedToDos: toDos.length,\n          allToDos: toDos,\n          optionName: 'All',\n          toDos: toDos\n        };\n      }\n\n    case GET_ALL_TODO:\n      {\n        return { ...state,\n          currentTodo: null,\n          toDos: state.allToDos\n        };\n      }\n\n    case GET_UNSELECTED_ALL_TODO:\n      {\n        let toDos = state.allToDos.map(todo => todo ? { ...todo,\n          selected: false\n        } : todo);\n        return { ...state,\n          selectedToDos: 0,\n          allToDos: toDos,\n          optionName: 'None',\n          toDos: toDos\n        };\n      }\n\n    case GET_STARRED_TODO:\n      {\n        let selectedToDos = 0;\n        let toDos = state.allToDos.map(todo => {\n          if (todo.starred) {\n            selectedToDos++;\n            return { ...todo,\n              selected: true\n            };\n          }\n\n          return { ...todo,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedToDos: selectedToDos,\n          allToDos: toDos,\n          optionName: 'Stared',\n          toDos: toDos.filter(todo => !todo.deleted)\n        };\n      }\n\n    case GET_UNSTARRED_TODO:\n      {\n        let selectedToDos = 0;\n        let toDos = state.allToDos.map(todo => {\n          if (!todo.starred) {\n            selectedToDos++;\n            return { ...todo,\n              selected: true\n            };\n          }\n\n          return { ...todo,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedToDos: selectedToDos,\n          allToDos: toDos,\n          optionName: 'UnStarred',\n          toDos: toDos.filter(todo => !todo.deleted)\n        };\n      }\n\n    case GET_IMPORTANT_TODO:\n      {\n        let selectedToDos = 0;\n        let toDos = state.allToDos.map(todo => {\n          if (todo.important) {\n            selectedToDos++;\n            return { ...todo,\n              selected: true\n            };\n          }\n\n          return { ...todo,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedToDos: selectedToDos,\n          allToDos: toDos,\n          optionName: 'Important',\n          toDos: toDos.filter(todo => !todo.deleted)\n        };\n      }\n\n    case GET_MARK_AS_START:\n      {\n        const toDos = state.allToDos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return action.payload;\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          alertMessage: 'ToDo Updated Successfully',\n          showMessage: true,\n          allToDos: toDos,\n          toDos: toDos\n        };\n      }\n\n    case GET_UNIMPORTANT_TODO:\n      {\n        let selectedToDos = 0;\n        let toDos = state.allToDos.map(todo => {\n          if (!todo.important) {\n            selectedToDos++;\n            return { ...todo,\n              selected: true\n            };\n          }\n\n          return { ...todo,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedToDos: selectedToDos,\n          allToDos: toDos,\n          optionName: 'Unimportant',\n          toDos: toDos.filter(todo => !todo.deleted)\n        };\n      }\n\n    case ON_LABEL_MENU_ITEM_SELECT:\n      {\n        const toDos = state.allToDos.map(todo => {\n          if (todo.selected) {\n            if (todo.labels.includes(action.payload.id)) {\n              todo.labels.splice(todo.labels.indexOf(action.payload.id), 1);\n              return { ...todo,\n                labels: todo.labels\n              };\n            } else {\n              return { ...todo,\n                labels: todo.labels.concat(action.payload.id)\n              };\n            }\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          alertMessage: 'Label Updated Successfully',\n          showMessage: true,\n          allToDos: toDos,\n          toDos: toDos\n        };\n      }\n\n    case ON_LABEL_UPDATE:\n      {\n        if (action.payload.data.labels.includes(action.payload.label.id)) {\n          action.payload.data.labels.splice(action.payload.data.labels.indexOf(action.payload.label.id), 1);\n        } else {\n          action.payload.data.labels = action.payload.data.labels.concat(action.payload.label.id);\n        }\n\n        const toDos = state.allToDos.map(todo => {\n          if (todo.id === action.payload.data.id) {\n            return action.payload.data;\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          alertMessage: 'Label Updated Successfully',\n          showMessage: true,\n          currentTodo: action.payload,\n          allToDos: toDos,\n          toDos: toDos\n        };\n      }\n\n    case ON_TODO_UPDATE:\n      {\n        const toDos = state.allToDos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return action.payload;\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          alertMessage: 'ToDo Updated Successfully',\n          showMessage: true,\n          currentTodo: action.payload,\n          allToDos: toDos,\n          toDos: toDos\n        };\n      }\n\n    case ON_DELETE_TODO:\n      {\n        let selectedToDos = 0;\n        const toDos = state.allToDos.map(todo => {\n          if (todo.selected) {\n            selectedToDos++;\n          }\n\n          if (action.payload.id === todo.id) {\n            if (todo.selected) {\n              selectedToDos--;\n            }\n\n            return { ...todo,\n              deleted: true\n            };\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          alertMessage: 'ToDo Deleted Successfully',\n          showMessage: true,\n          allToDos: toDos,\n          currentTodo: null,\n          selectedToDos: selectedToDos,\n          toDos: toDos.filter(todo => !todo.deleted)\n        };\n      }\n\n    case GET_NAV_LABELS:\n      {\n        const filterMails = state.allToDos.filter(todo => todo.labels.includes(action.payload.id));\n        return { ...state,\n          loader: true,\n          currentTodo: null,\n          toDos: filterMails\n        };\n      }\n\n    case GET_NAV_FILTERS:\n      {\n        const filterMails = state.allToDos.filter(todo => {\n          if (action.payload.id === 0 && todo.starred) {\n            return todo;\n          } else if (action.payload.id === 1 && todo.important) {\n            return todo;\n          } else if (action.payload.id === 2 && todo.important) {\n            return todo;\n          } else if (action.payload.id === 3 && todo.important) {\n            return todo;\n          } else if (action.payload.id === 4 && todo.completed) {\n            return todo;\n          } else if (action.payload.id === 5 && todo.deleted) {\n            return todo;\n          } else return todo;\n        });\n        return { ...state,\n          loader: true,\n          currentTodo: null,\n          filter: action.payload.id,\n          toDos: filterMails\n        };\n      }\n\n    case SEARCH_TODO:\n      {\n        if (action.payload === '') {\n          return { ...state,\n            toDos: state.allToDos.filter(todo => !todo.deleted)\n          };\n        } else {\n          const searchToDos = state.allToDos.filter(todo => !todo.deleted && todo.title.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n          return { ...state,\n            toDos: searchToDos\n          };\n        }\n      }\n\n    case SHOW_TODOS:\n      {\n        return { ...state\n        };\n      }\n\n    case GET_TODO_CONVERSATION:\n      {\n        return { ...state\n        };\n      }\n\n    case ON_TODO_CHECKED:\n      {\n        action.payload.selected = !action.payload.selected;\n        let selectedToDos = 0;\n        const toDos = state.toDos.map(todo => {\n          if (todo.selected) {\n            selectedToDos++;\n          }\n\n          if (todo.id === action.payload.id) {\n            if (todo.selected) {\n              selectedToDos++;\n            }\n\n            return action.payload;\n          } else {\n            return todo;\n          }\n        });\n        return { ...state,\n          selectedToDos: selectedToDos,\n          toDos: toDos\n        };\n      }\n\n    case ON_TODO_ADD:\n      {\n        return { ...state,\n          toDos: state.allToDos.concat(action.payload),\n          allToDos: state.allToDos.concat(action.payload)\n        };\n      }\n\n    case ON_TODO_SELECT:\n      {\n        let conversationList = state.todoConversation.find(conversation => conversation.id === action.payload.id);\n\n        if (conversationList) {\n          conversationList = conversationList.conversationData;\n        } else {\n          conversationList = [];\n        }\n\n        return { ...state,\n          currentTodo: action.payload,\n          loader: true,\n          conversation: conversationList\n        };\n      }\n\n    case SET_CURRENT_TODO_NULL:\n      {\n        return { ...state,\n          currentTodo: null\n        };\n      }\n\n    case UPDATE_SEARCH:\n      {\n        return { ...state,\n          searchTodo: action.payload\n        };\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return { ...state,\n          drawerState: !state.drawerState\n        };\n      }\n\n    case HANDLE_REQUEST_CLOSE:\n      {\n        return { ...state,\n          showMessage: false,\n          addTodo: false,\n          labelMenuState: false,\n          optionMenuState: false\n        };\n      }\n\n    case ON_HIDE_LOADER:\n      {\n        return { ...state,\n          loader: false\n        };\n      }\n\n    case FETCH_ALL_TODO_SUCCESS:\n      {\n        return { ...state,\n          allToDos: action.payload,\n          toDos: action.payload,\n          loader: false\n        };\n      }\n\n    case FETCH_ALL_TODO_CONVERSATION_SUCCESS:\n      {\n        return { ...state,\n          todoConversation: action.payload\n        };\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/reducers/ToDo.js"],"names":["arrayMove","todoConversation","toDos","FETCH_ALL_TODO_CONVERSATION_SUCCESS","FETCH_ALL_TODO_SUCCESS","GET_ALL_TODO","GET_IMPORTANT_TODO","GET_MARK_AS_START","GET_NAV_FILTERS","GET_NAV_LABELS","GET_STARRED_TODO","GET_TODO_CONVERSATION","GET_UNIMPORTANT_TODO","GET_UNSELECTED_ALL_TODO","GET_UNSTARRED_TODO","HANDLE_REQUEST_CLOSE","ON_DELETE_TODO","ON_HIDE_LOADER","ON_LABEL_MENU_ITEM_SELECT","ON_LABEL_SELECT","ON_LABEL_UPDATE","ON_OPTION_MENU_ITEM_SELECT","ON_OPTION_MENU_SELECT","ON_SORTEND","ON_TODO_ADD","ON_TODO_CHECKED","ON_TODO_SELECT","ON_TODO_UPDATE","ON_TOGGLE_DRAWER","SEARCH_TODO","SELECT_ALL_TODO","SET_CURRENT_TODO_NULL","SHOW_MESSAGE","SHOW_TODOS","UPDATE_SEARCH","INIT_STATE","searchTodo","alertMessage","loader","showMessage","optionName","drawerState","allToDos","currentTodo","user","name","email","avatar","selectedToDos","labelMenuState","optionMenuState","filter","conversation","state","action","type","payload","oldIndex","newIndex","map","todo","selected","length","starred","deleted","important","id","labels","includes","splice","indexOf","concat","data","label","filterMails","completed","searchToDos","title","toLowerCase","conversationList","find","conversationData","addTodo"],"mappings":"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","sourcesContent":["import arrayMove from 'array-move';\nimport todoConversation from 'app/routes/todo/data/todoConversation';\nimport toDos from 'app/routes/todo/data/todo';\nimport {\n  FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n  FETCH_ALL_TODO_SUCCESS,\n  GET_ALL_TODO,\n  GET_IMPORTANT_TODO,\n  GET_MARK_AS_START,\n  GET_NAV_FILTERS,\n  GET_NAV_LABELS,\n  GET_STARRED_TODO,\n  GET_TODO_CONVERSATION,\n  GET_UNIMPORTANT_TODO,\n  GET_UNSELECTED_ALL_TODO,\n  GET_UNSTARRED_TODO,\n  HANDLE_REQUEST_CLOSE,\n  ON_DELETE_TODO,\n  ON_HIDE_LOADER,\n  ON_LABEL_MENU_ITEM_SELECT,\n  ON_LABEL_SELECT,\n  ON_LABEL_UPDATE,\n  ON_OPTION_MENU_ITEM_SELECT,\n  ON_OPTION_MENU_SELECT,\n  ON_SORTEND,\n  ON_TODO_ADD,\n  ON_TODO_CHECKED,\n  ON_TODO_SELECT,\n  ON_TODO_UPDATE,\n  ON_TOGGLE_DRAWER,\n  SEARCH_TODO,\n  SELECT_ALL_TODO,\n  SET_CURRENT_TODO_NULL,\n  SHOW_MESSAGE,\n  SHOW_TODOS,\n  UPDATE_SEARCH\n} from 'constants/ActionTypes'\n\nconst INIT_STATE = {\n  searchTodo: '',\n  alertMessage: '',\n  loader: true,\n  showMessage: false,\n  optionName: 'None',\n  drawerState: false,\n  // allToDos: [],\n  allToDos: toDos,\n  currentTodo: null,\n  user: {\n    name: 'Robert Johnson',\n    email: 'robert.johnson@example.com',\n    avatar: 'https://via.placeholder.com/150x150'\n  },\n  selectedToDos: 0,\n  labelMenuState: false,\n  optionMenuState: false,\n  // toDos: [],\n  toDos: toDos,\n  filter: -1,\n  // todoConversation: [],\n  todoConversation,\n  conversation: null\n};\n\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case ON_SORTEND: {\n      return {\n        ...state, toDos: arrayMove(state.toDos, action.payload.oldIndex, action.payload.newIndex)\n      }\n    }\n    case ON_LABEL_SELECT: {\n      return {\n        ...state,\n        labelMenuState: !state.labelMenuState\n      }\n    }\n    case ON_OPTION_MENU_SELECT: {\n      return {\n        ...state,\n        optionMenuState: !state.optionMenuState\n      }\n    }\n    case ON_OPTION_MENU_ITEM_SELECT: {\n      return {...state}\n    }\n    case SELECT_ALL_TODO: {\n      let toDos = state.allToDos.map((todo) => todo ? {\n        ...todo,\n        selected: true\n      } : todo);\n\n      return {\n        ...state,\n        selectedToDos: toDos.length,\n        allToDos: toDos,\n        optionName: 'All',\n        toDos: toDos\n      }\n    }\n    case GET_ALL_TODO: {\n      return {\n        ...state,\n        currentTodo: null,\n        toDos: state.allToDos\n      }\n    }\n    case GET_UNSELECTED_ALL_TODO: {\n\n      let toDos = state.allToDos.map((todo) => todo ? {\n        ...todo,\n        selected: false\n      } : todo);\n      return {\n        ...state,\n        selectedToDos: 0,\n        allToDos: toDos,\n        optionName: 'None',\n        toDos: toDos\n      }\n    }\n    case GET_STARRED_TODO: {\n      let selectedToDos = 0;\n      let toDos = state.allToDos.map((todo) => {\n        if (todo.starred) {\n          selectedToDos++;\n          return {...todo, selected: true};\n        }\n        return {...todo, selected: false}\n      });\n      return {\n        ...state,\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Stared',\n        toDos: toDos.filter(todo => !todo.deleted)\n      }\n    }\n    case GET_UNSTARRED_TODO: {\n      let selectedToDos = 0;\n      let toDos = state.allToDos.map((todo) => {\n        if (!todo.starred) {\n          selectedToDos++;\n          return {...todo, selected: true};\n        }\n        return {...todo, selected: false}\n      });\n      return {\n        ...state,\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'UnStarred',\n        toDos: toDos.filter(todo => !todo.deleted)\n      }\n    }\n    case GET_IMPORTANT_TODO: {\n      let selectedToDos = 0;\n      let toDos = state.allToDos.map((todo) => {\n        if (todo.important) {\n          selectedToDos++;\n          return {...todo, selected: true};\n        }\n        return {...todo, selected: false}\n      });\n      return {\n        ...state,\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Important',\n        toDos: toDos.filter(todo => !todo.deleted)\n      }\n    }\n\n    case GET_MARK_AS_START: {\n      const toDos = state.allToDos.map(todo => {\n        if (todo.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return todo;\n        }\n      });\n      return {\n        ...state,\n        alertMessage: 'ToDo Updated Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        toDos: toDos,\n      }\n    }\n    case GET_UNIMPORTANT_TODO: {\n      let selectedToDos = 0;\n      let toDos = state.allToDos.map((todo) => {\n        if (!todo.important) {\n          selectedToDos++;\n          return {...todo, selected: true};\n        }\n        return {...todo, selected: false}\n      });\n\n      return {\n        ...state,\n        selectedToDos: selectedToDos,\n        allToDos: toDos,\n        optionName: 'Unimportant',\n        toDos: toDos.filter(todo => !todo.deleted)\n      }\n    }\n    case ON_LABEL_MENU_ITEM_SELECT: {\n      const toDos = state.allToDos.map(todo => {\n          if (todo.selected) {\n            if (todo.labels.includes(action.payload.id)) {\n              todo.labels.splice(todo.labels.indexOf(action.payload.id), 1);\n              return {...todo, labels: todo.labels};\n            } else {\n              return {...todo, labels: todo.labels.concat(action.payload.id)};\n            }\n          } else {\n            return todo;\n          }\n        }\n      );\n      return {\n        ...state,\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        toDos: toDos\n      }\n    }\n    case ON_LABEL_UPDATE: {\n      if (action.payload.data.labels.includes(action.payload.label.id)) {\n        action.payload.data.labels.splice(action.payload.data.labels.indexOf(action.payload.label.id), 1);\n      } else {\n        action.payload.data.labels = action.payload.data.labels.concat(action.payload.label.id);\n      }\n      const toDos = state.allToDos.map(todo => {\n          if (todo.id === action.payload.data.id) {\n            return action.payload.data;\n          } else {\n            return todo;\n          }\n        }\n      );\n\n      return {\n        ...state,\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        currentTodo: action.payload,\n        allToDos: toDos,\n        toDos: toDos,\n      }\n    }\n    case ON_TODO_UPDATE: {\n      const toDos = state.allToDos.map(todo => {\n        if (todo.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return todo;\n        }\n      });\n      return {\n        ...state,\n        alertMessage: 'ToDo Updated Successfully',\n        showMessage: true,\n        currentTodo: action.payload,\n        allToDos: toDos,\n        toDos: toDos,\n      }\n    }\n    case ON_DELETE_TODO: {\n      let selectedToDos = 0;\n      const toDos = state.allToDos.map(todo => {\n          if (todo.selected) {\n            selectedToDos++\n          }\n          if (action.payload.id === todo.id) {\n            if (todo.selected) {\n              selectedToDos--\n            }\n            return {...todo, deleted: true};\n          } else {\n            return todo;\n          }\n        }\n      );\n      return {\n        ...state,\n        alertMessage: 'ToDo Deleted Successfully',\n        showMessage: true,\n        allToDos: toDos,\n        currentTodo: null,\n        selectedToDos: selectedToDos,\n        toDos: toDos.filter((todo) => !todo.deleted)\n      }\n    }\n\n    case GET_NAV_LABELS: {\n      const filterMails = state.allToDos.filter(todo => todo.labels.includes(action.payload.id));\n      return {\n        ...state,\n        loader: true,\n        currentTodo: null,\n        toDos: filterMails\n      }\n    }\n    case GET_NAV_FILTERS: {\n      const filterMails = state.allToDos.filter(todo => {\n        if (action.payload.id === 0 && todo.starred) {\n          return todo\n        } else if (action.payload.id === 1 && todo.important) {\n          return todo\n        } else if (action.payload.id === 2 && todo.important) {\n          return todo\n        } else if (action.payload.id === 3 && todo.important) {\n          return todo\n        } else if (action.payload.id === 4 && todo.completed) {\n          return todo\n        } else if (action.payload.id === 5 && todo.deleted) {\n          return todo\n        } else return todo;\n      });\n      return {\n        ...state,\n        loader: true,\n        currentTodo: null,\n        filter: action.payload.id,\n        toDos: filterMails\n      }\n    }\n\n    case SEARCH_TODO: {\n      if (action.payload === '') {\n        return {...state, toDos: state.allToDos.filter((todo) => !todo.deleted)};\n      } else {\n        const searchToDos = state.allToDos.filter((todo) =>\n          !todo.deleted && todo.title.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n        return {...state, toDos: searchToDos}\n      }\n    }\n    case SHOW_TODOS: {\n      return {...state}\n    }\n    case GET_TODO_CONVERSATION: {\n      return {...state}\n    }\n    case ON_TODO_CHECKED: {\n      action.payload.selected = !action.payload.selected;\n      let selectedToDos = 0;\n      const toDos = state.toDos.map(todo => {\n          if (todo.selected) {\n            selectedToDos++;\n          }\n          if (todo.id === action.payload.id) {\n            if (todo.selected) {\n              selectedToDos++;\n            }\n            return action.payload;\n          } else {\n            return todo;\n          }\n        }\n      );\n      return {\n        ...state,\n        selectedToDos: selectedToDos,\n        toDos: toDos\n      }\n    }\n    case ON_TODO_ADD: {\n      return {\n        ...state,\n        toDos: state.allToDos.concat(action.payload),\n        allToDos: state.allToDos.concat(action.payload)\n      }\n    }\n    case ON_TODO_SELECT: {\n      let conversationList = state.todoConversation.find((conversation) => conversation.id === action.payload.id);\n      if (conversationList) {\n        conversationList = conversationList.conversationData;\n      } else {\n        conversationList = [];\n      }\n      return {\n        ...state,\n        currentTodo: action.payload,\n        loader: true,\n        conversation: conversationList\n      }\n    }\n    case SET_CURRENT_TODO_NULL: {\n      return {...state, currentTodo: null}\n    }\n    case UPDATE_SEARCH: {\n      return {...state, searchTodo: action.payload}\n    }\n    case ON_TOGGLE_DRAWER: {\n      return {...state, drawerState: !state.drawerState}\n    }\n    case HANDLE_REQUEST_CLOSE: {\n      return {...state, showMessage: false, addTodo: false, labelMenuState: false, optionMenuState: false}\n    }\n    case ON_HIDE_LOADER: {\n      return {...state, loader: false}\n    }\n    case FETCH_ALL_TODO_SUCCESS: {\n      return {\n        ...state,\n        allToDos: action.payload,\n        toDos: action.payload,\n        loader: false,\n      }\n    }\n    case FETCH_ALL_TODO_CONVERSATION_SUCCESS: {\n      return {\n        ...state,\n        todoConversation: action.payload\n      }\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      }\n    }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}