{"ast":null,"code":"import _objectSpread from\"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import Moment from'moment';import users from'app/routes/chatPanel/data/chatUsers';import conversationList from'app/routes/chatPanel/data/conversationList';import{FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS,FETCH_ALL_CHAT_USER_SUCCESS,FILTER_CONTACT,FILTER_USERS,ON_HIDE_LOADER,ON_SELECT_USER,ON_TOGGLE_DRAWER,SHOW_MESSAGE,SUBMIT_COMMENT,UPDATE_MESSAGE_VALUE,UPDATE_SEARCH_CHAT_USER}from'constants/ActionTypes';import{USER_INFO_STATE}from'../constants/ActionTypes';var INIT_STATE={loader:true,userNotFound:'No user found',drawerState:false,selectedSectionId:'',userState:1,searchChatUser:'',// contactList: [], onlt for production\ncontactList:users.filter(function(user){return!user.recent;}),selectedUser:null,message:'',// chatUsers: [],\n// conversationList: [], //ony for prod\nchatUsers:users.filter(function(user){return user.recent;}),conversationList:conversationList,conversation:null};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INIT_STATE;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case FILTER_CONTACT:{if(action.payload===''){return _objectSpread({},state,{contactList:users.filter(function(user){return!user.recent;})});}else{return _objectSpread({},state,{contactList:users.filter(function(user){return!user.recent&&user.name.toLowerCase().indexOf(action.payload.toLowerCase())>-1;})});}}case FILTER_USERS:{if(action.payload===''){return _objectSpread({},state,{chatUsers:users.filter(function(user){return!user.recent;})});}else{return _objectSpread({},state,{chatUsers:users.filter(function(user){return!user.recent&&user.name.toLowerCase().indexOf(action.payload.toLowerCase())>-1;})});}}case ON_SELECT_USER:{return _objectSpread({},state,{loader:true,drawerState:false,selectedSectionId:action.payload.id,selectedUser:action.payload,conversation:state.conversationList.find(function(data){return data.id===action.payload.id;})});}case ON_TOGGLE_DRAWER:{return _objectSpread({},state,{drawerState:!state.drawerState});}case ON_HIDE_LOADER:{return _objectSpread({},state,{loader:false});}case USER_INFO_STATE:{return _objectSpread({},state,{userState:action.payload});}case SUBMIT_COMMENT:{var updatedConversation=state.conversation.conversationData.concat({'type':'sent','message':state.message,'sentAt':Moment().format('hh:mm:ss A')});return _objectSpread({},state,{conversation:_objectSpread({},state.conversation,{conversationData:updatedConversation}),message:'',conversationList:state.conversationList.map(function(conversationData){if(conversationData.id===state.conversation.id){return _objectSpread({},state.conversation,{conversationData:updatedConversation});}else{return conversationData;}})});}case UPDATE_MESSAGE_VALUE:{return _objectSpread({},state,{message:action.payload});}case UPDATE_SEARCH_CHAT_USER:{return _objectSpread({},state,{searchChatUser:action.payload});}case FETCH_ALL_CHAT_USER_SUCCESS:{return _objectSpread({},state,{contactList:action.payload.filter(function(user){return!user.recent;}),chatUsers:action.payload.filter(function(user){return user.recent;}),loader:false});}case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS:{return _objectSpread({},state,{conversationList:conversationList});}case SHOW_MESSAGE:{return _objectSpread({},state,{alertMessage:action.payload,showMessage:true,loader:false});}default:return state;}});","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/reducers/Chat.js"],"names":["Moment","users","conversationList","FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS","FETCH_ALL_CHAT_USER_SUCCESS","FILTER_CONTACT","FILTER_USERS","ON_HIDE_LOADER","ON_SELECT_USER","ON_TOGGLE_DRAWER","SHOW_MESSAGE","SUBMIT_COMMENT","UPDATE_MESSAGE_VALUE","UPDATE_SEARCH_CHAT_USER","USER_INFO_STATE","INIT_STATE","loader","userNotFound","drawerState","selectedSectionId","userState","searchChatUser","contactList","filter","user","recent","selectedUser","message","chatUsers","conversation","state","action","type","payload","name","toLowerCase","indexOf","id","find","data","updatedConversation","conversationData","concat","format","map","alertMessage","showMessage"],"mappings":"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","sourcesContent":["import Moment from 'moment';\nimport users from 'app/routes/chatPanel/data/chatUsers';\nimport conversationList from 'app/routes/chatPanel/data/conversationList';\nimport {\n  FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS,\n  FETCH_ALL_CHAT_USER_SUCCESS,\n  FILTER_CONTACT,\n  FILTER_USERS,\n  ON_HIDE_LOADER,\n  ON_SELECT_USER,\n  ON_TOGGLE_DRAWER,\n  SHOW_MESSAGE,\n  SUBMIT_COMMENT,\n  UPDATE_MESSAGE_VALUE,\n  UPDATE_SEARCH_CHAT_USER\n} from 'constants/ActionTypes';\nimport {USER_INFO_STATE} from '../constants/ActionTypes';\n\n\nconst INIT_STATE = {\n  loader: true,\n  userNotFound: 'No user found',\n  drawerState: false,\n  selectedSectionId: '',\n  userState: 1,\n  searchChatUser: '',\n  // contactList: [], onlt for production\n  contactList: users.filter((user) => !user.recent),\n  selectedUser: null,\n  message: '',\n  // chatUsers: [],\n  // conversationList: [], //ony for prod\n  chatUsers: users.filter((user) => user.recent),\n  conversationList: conversationList,\n  conversation: null\n};\n\n\nexport default (state = INIT_STATE, action) => {\n\n  switch (action.type) {\n    case FILTER_CONTACT: {\n      if (action.payload === '') {\n        return {\n          ...state, contactList: users.filter(user => !user.recent)\n        }\n      } else {\n        return {\n          ...state, contactList: users.filter((user) =>\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\n          )\n        }\n      }\n    }\n\n    case FILTER_USERS: {\n      if (action.payload === '') {\n        return {\n          ...state, chatUsers: users.filter(user => !user.recent)\n        }\n      } else {\n        return {\n          ...state, chatUsers: users.filter((user) =>\n            !user.recent && user.name.toLowerCase().indexOf(action.payload.toLowerCase()) > -1\n          )\n        }\n      }\n    }\n\n    case ON_SELECT_USER: {\n      return {\n        ...state,\n        loader: true,\n        drawerState: false,\n        selectedSectionId: action.payload.id,\n        selectedUser: action.payload,\n        conversation: state.conversationList.find((data) => data.id === action.payload.id)\n      }\n    }\n    case ON_TOGGLE_DRAWER: {\n      return {...state, drawerState: !state.drawerState}\n    }\n    case ON_HIDE_LOADER: {\n      return {...state, loader: false}\n    }\n    case USER_INFO_STATE: {\n      return {...state, userState: action.payload}\n    }\n\n    case SUBMIT_COMMENT: {\n      const updatedConversation = state.conversation.conversationData.concat({\n        'type': 'sent',\n        'message': state.message,\n        'sentAt': Moment().format('hh:mm:ss A'),\n      });\n\n      return {\n        ...state,\n        conversation: {\n          ...state.conversation, conversationData: updatedConversation\n        },\n        message: '',\n        conversationList: state.conversationList.map(conversationData => {\n          if (conversationData.id === state.conversation.id) {\n            return {...state.conversation, conversationData: updatedConversation};\n          } else {\n            return conversationData;\n          }\n        })\n\n      }\n    }\n\n    case UPDATE_MESSAGE_VALUE: {\n      return {...state, message: action.payload}\n    }\n\n    case UPDATE_SEARCH_CHAT_USER: {\n      return {...state, searchChatUser: action.payload}\n    }\n\n    case FETCH_ALL_CHAT_USER_SUCCESS: {\n      return {\n        ...state,\n        contactList: action.payload.filter((user) => !user.recent),\n        chatUsers: action.payload.filter((user) => user.recent),\n        loader: false,\n      }\n    }\n    case FETCH_ALL_CHAT_USER_CONVERSATION_SUCCESS: {\n      return {\n        ...state,\n        conversationList: conversationList\n      }\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      }\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}