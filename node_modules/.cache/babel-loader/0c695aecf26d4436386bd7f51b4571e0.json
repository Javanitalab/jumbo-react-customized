{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/components/dashboard/eCommerce/YearlyProfitChart.js\";\nimport React, { Component } from 'react';\nimport { Chart, Doughnut } from 'react-chartjs-2';\nimport '../../../app/routes/dashboard/routes/Misc/test.css';\n\nclass YearlyProfitChart extends Component {\n  render() {\n    const {\n      shadowColor,\n      centerText,\n      textColor,\n      height,\n      backgroundColor,\n      borderColor,\n      hoverBorderColor,\n      hoverBorderWidth,\n      rotation,\n      chartType\n    } = this.props;\n\n    const data = canvas => {\n      const ctx = canvas.getContext(\"2d\");\n      const _stroke = ctx.stroke;\n\n      ctx.stroke = function () {\n        ctx.save();\n        ctx.shadowColor = shadowColor;\n        ctx.shadowBlur = 20;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 10;\n\n        _stroke.apply(this, arguments);\n\n        ctx.restore();\n      };\n\n      Chart.pluginService.register({\n        beforeDraw: function (chart) {\n          if (chart.options.chartType === chartType) {\n            let width = chart.chart.width,\n                height = chart.chart.height,\n                ctx = chart.chart.ctx;\n            ctx.restore();\n            let fontSize = \"1.4\";\n            ctx.font = fontSize + \"em sans-serif\";\n            ctx.fillStyle = textColor;\n            ctx.textBaseline = \"middle\";\n            let text = centerText,\n                textX = Math.round((width - ctx.measureText(text).width) / 2),\n                textY = height / 2;\n            ctx.fillText(text, textX, textY);\n            ctx.save();\n          }\n        }\n      });\n      return {\n        labels: ['red', 'sky'],\n        datasets: [{\n          data: [100, 300],\n          backgroundColor: backgroundColor,\n          borderColor: borderColor,\n          hoverBorderColor: hoverBorderColor,\n          hoverBorderWidth: hoverBorderWidth\n        }]\n      };\n    };\n\n    const options = {\n      maintainAspectRatio: false,\n      chartType: chartType,\n      legend: {\n        display: false,\n        labels: {\n          fontColor: '#AAAEB3'\n        }\n      },\n      layout: {\n        padding: {\n          top: 5,\n          bottom: 5,\n          right: 0,\n          left: 0\n        }\n      },\n      cutoutPercentage: 75,\n      borderWidth: 0,\n      rotation: -0.5 * Math.PI - 25 / rotation * Math.PI\n    };\n    return React.createElement(Doughnut, {\n      data: data,\n      options: options,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default YearlyProfitChart;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/components/dashboard/eCommerce/YearlyProfitChart.js"],"names":["React","Component","Chart","Doughnut","YearlyProfitChart","render","shadowColor","centerText","textColor","height","backgroundColor","borderColor","hoverBorderColor","hoverBorderWidth","rotation","chartType","props","data","canvas","ctx","getContext","_stroke","stroke","save","shadowBlur","shadowOffsetX","shadowOffsetY","apply","arguments","restore","pluginService","register","beforeDraw","chart","options","width","fontSize","font","fillStyle","textBaseline","text","textX","Math","round","measureText","textY","fillText","labels","datasets","maintainAspectRatio","legend","display","fontColor","layout","padding","top","bottom","right","left","cutoutPercentage","borderWidth","PI"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Chart, Doughnut} from 'react-chartjs-2';\nimport '../../../app/routes/dashboard/routes/Misc/test.css'\n\nclass YearlyProfitChart extends Component {\n\n  render() {\n\n    const {\n      shadowColor,\n      centerText,\n      textColor,\n      height,\n      backgroundColor,\n      borderColor,\n      hoverBorderColor,\n      hoverBorderWidth,\n      rotation,\n      chartType\n    } = this.props;\n\n    const data = (canvas) => {\n      const ctx = canvas.getContext(\"2d\");\n      const _stroke = ctx.stroke;\n      ctx.stroke = function () {\n        ctx.save();\n        ctx.shadowColor = shadowColor;\n        ctx.shadowBlur = 20;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 10;\n        _stroke.apply(this, arguments);\n        ctx.restore();\n      };\n\n      Chart.pluginService.register({\n\n        beforeDraw: function (chart) {\n          if (chart.options.chartType === chartType) {\n            let width = chart.chart.width,\n              height = chart.chart.height,\n              ctx = chart.chart.ctx;\n\n            ctx.restore();\n            let fontSize = \"1.4\";\n            ctx.font = fontSize + \"em sans-serif\";\n            ctx.fillStyle = textColor;\n            ctx.textBaseline = \"middle\";\n\n            let text = centerText,\n              textX = Math.round((width - ctx.measureText(text).width) / 2),\n              textY = height / 2;\n            ctx.fillText(text, textX, textY);\n            ctx.save();\n          }\n        }\n      });\n\n      return {\n        labels: [\n          'red',\n          'sky',\n        ],\n        datasets: [{\n          data: [100, 300],\n          backgroundColor: backgroundColor,\n          borderColor: borderColor,\n          hoverBorderColor: hoverBorderColor,\n          hoverBorderWidth: hoverBorderWidth\n        }],\n      }\n    }\n\n\n    const options = {\n      maintainAspectRatio: false,\n      chartType: chartType,\n      legend: {\n        display: false,\n        labels: {\n          fontColor: '#AAAEB3'\n        }\n      },\n      layout: {\n        padding: {\n          top: 5,\n          bottom: 5,\n          right: 0,\n          left: 0,\n        }\n      },\n      cutoutPercentage: 75,\n      borderWidth: 0,\n      rotation: (-0.5 * Math.PI) - (25 / rotation * Math.PI)\n    };\n    return (\n      <Doughnut data={data} options={options} height={height}/>\n    );\n  }\n}\n\nexport default YearlyProfitChart;"]},"metadata":{},"sourceType":"module"}