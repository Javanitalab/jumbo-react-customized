{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { database } from '../firebase/firebase';\nimport { FETCH_ALL_CHAT_USER, FETCH_ALL_CHAT_USER_CONVERSATION } from 'constants/ActionTypes';\nimport { fetchChatUserConversationSuccess, fetchChatUserSuccess, showChatMessage } from 'actions/Chat';\n\nconst getChatUsers = async () => await database.ref('prod/chat/users').once('value').then(snapshot => {\n  const chatUsers = [];\n  snapshot.forEach(rawData => {\n    chatUsers.push(rawData.val());\n  });\n  return chatUsers;\n}).catch(error => error);\n\nconst getUsersConversation = async () => await database.ref('prod/chat/conversation').once('value').then(snapshot => {\n  const conversations = [];\n  snapshot.forEach(rawData => {\n    const conversation = rawData.val(); // change object to array\n\n    const conversationDatas = [];\n\n    if (conversation.conversationData) {\n      conversation.conversationData.forEach(conversationData => conversationDatas.push(conversationData));\n    }\n\n    conversation.conversationData = conversationDatas;\n    conversations.push(conversation);\n  });\n  return conversations;\n}).catch(error => error);\n\nfunction* fetchChatUserRequest() {\n  try {\n    const fetchedTodo = yield call(getChatUsers);\n    yield put(fetchChatUserSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nfunction* fetchChatUserConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getUsersConversation);\n    yield put(fetchChatUserConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nexport function* fetchChatUser() {\n  yield takeEvery(FETCH_ALL_CHAT_USER, fetchChatUserRequest);\n}\nexport function* fetchChatUserConversation() {\n  yield takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION, fetchChatUserConversationRequest);\n}\nexport default function* rootSaga() {\n  yield all([fork(fetchChatUserConversation), fork(fetchChatUser)]);\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Chat.js"],"names":["all","call","fork","put","takeEvery","database","FETCH_ALL_CHAT_USER","FETCH_ALL_CHAT_USER_CONVERSATION","fetchChatUserConversationSuccess","fetchChatUserSuccess","showChatMessage","getChatUsers","ref","once","then","snapshot","chatUsers","forEach","rawData","push","val","catch","error","getUsersConversation","conversations","conversation","conversationDatas","conversationData","fetchChatUserRequest","fetchedTodo","fetchChatUserConversationRequest","fetchedTodoConversation","fetchChatUser","fetchChatUserConversation","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,QAA8C,oBAA9C;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,mBAAR,EAA6BC,gCAA7B,QAAoE,uBAApE;AACA,SAAQC,gCAAR,EAA0CC,oBAA1C,EAAgEC,eAAhE,QAAsF,cAAtF;;AAEA,MAAMC,YAAY,GAAG,YACnB,MAAMN,QAAQ,CAACO,GAAT,CAAa,iBAAb,EAAgCC,IAAhC,CAAqC,OAArC,EACHC,IADG,CACGC,QAAD,IAAc;AAClB,QAAMC,SAAS,GAAG,EAAlB;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5BF,IAAAA,SAAS,CAACG,IAAV,CAAeD,OAAO,CAACE,GAAR,EAAf;AACD,GAFD;AAGA,SAAOJ,SAAP;AACD,CAPG,EAQHK,KARG,CAQGC,KAAK,IAAIA,KARZ,CADR;;AAWA,MAAMC,oBAAoB,GAAG,YAC3B,MAAMlB,QAAQ,CAACO,GAAT,CAAa,wBAAb,EAAuCC,IAAvC,CAA4C,OAA5C,EACHC,IADG,CACGC,QAAD,IAAc;AAClB,QAAMS,aAAa,GAAG,EAAtB;AACAT,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B,UAAMO,YAAY,GAAGP,OAAO,CAACE,GAAR,EAArB,CAD4B,CAG5B;;AACA,UAAMM,iBAAiB,GAAG,EAA1B;;AACA,QAAID,YAAY,CAACE,gBAAjB,EAAmC;AACjCF,MAAAA,YAAY,CAACE,gBAAb,CAA8BV,OAA9B,CAAuCU,gBAAD,IACpCD,iBAAiB,CAACP,IAAlB,CAAuBQ,gBAAvB,CADF;AAGD;;AACDF,IAAAA,YAAY,CAACE,gBAAb,GAAgCD,iBAAhC;AACAF,IAAAA,aAAa,CAACL,IAAd,CAAmBM,YAAnB;AACD,GAZD;AAcA,SAAOD,aAAP;AACD,CAlBG,EAmBHH,KAnBG,CAmBGC,KAAK,IAAIA,KAnBZ,CADR;;AAuBA,UAAUM,oBAAV,GAAiC;AAC/B,MAAI;AACF,UAAMC,WAAW,GAAG,MAAM5B,IAAI,CAACU,YAAD,CAA9B;AACA,UAAMR,GAAG,CAACM,oBAAoB,CAACoB,WAAD,CAArB,CAAT;AACD,GAHD,CAGE,OAAOP,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACO,eAAe,CAACY,KAAD,CAAhB,CAAT;AACD;AACF;;AAED,UAAUQ,gCAAV,GAA6C;AAC3C,MAAI;AACF,UAAMC,uBAAuB,GAAG,MAAM9B,IAAI,CAACsB,oBAAD,CAA1C;AACA,UAAMpB,GAAG,CAACK,gCAAgC,CAACuB,uBAAD,CAAjC,CAAT;AACD,GAHD,CAGE,OAAOT,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACO,eAAe,CAACY,KAAD,CAAhB,CAAT;AACD;AACF;;AAED,OAAO,UAAUU,aAAV,GAA0B;AAC/B,QAAM5B,SAAS,CAACE,mBAAD,EAAsBsB,oBAAtB,CAAf;AACD;AAED,OAAO,UAAUK,yBAAV,GAAsC;AAC3C,QAAM7B,SAAS,CAACG,gCAAD,EAAmCuB,gCAAnC,CAAf;AACD;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMlC,GAAG,CAAC,CAACE,IAAI,CAAC+B,yBAAD,CAAL,EAAkC/B,IAAI,CAAC8B,aAAD,CAAtC,CAAD,CAAT;AACD","sourcesContent":["import {all, call, fork, put, takeEvery} from 'redux-saga/effects';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_CHAT_USER, FETCH_ALL_CHAT_USER_CONVERSATION} from 'constants/ActionTypes';\nimport {fetchChatUserConversationSuccess, fetchChatUserSuccess, showChatMessage} from 'actions/Chat';\n\nconst getChatUsers = async () =>\n  await database.ref('prod/chat/users').once('value')\n    .then((snapshot) => {\n      const chatUsers = [];\n      snapshot.forEach((rawData) => {\n        chatUsers.push(rawData.val());\n      });\n      return chatUsers;\n    })\n    .catch(error => error);\n\nconst getUsersConversation = async () =>\n  await database.ref('prod/chat/conversation').once('value')\n    .then((snapshot) => {\n      const conversations = [];\n      snapshot.forEach((rawData) => {\n        const conversation = rawData.val();\n\n        // change object to array\n        const conversationDatas = [];\n        if (conversation.conversationData) {\n          conversation.conversationData.forEach((conversationData) =>\n            conversationDatas.push(conversationData)\n          );\n        }\n        conversation.conversationData = conversationDatas;\n        conversations.push(conversation);\n      });\n\n      return conversations;\n    })\n    .catch(error => error);\n\n\nfunction* fetchChatUserRequest() {\n  try {\n    const fetchedTodo = yield call(getChatUsers);\n    yield put(fetchChatUserSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nfunction* fetchChatUserConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getUsersConversation);\n    yield put(fetchChatUserConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showChatMessage(error));\n  }\n}\n\nexport function* fetchChatUser() {\n  yield takeEvery(FETCH_ALL_CHAT_USER, fetchChatUserRequest);\n}\n\nexport function* fetchChatUserConversation() {\n  yield takeEvery(FETCH_ALL_CHAT_USER_CONVERSATION, fetchChatUserConversationRequest);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(fetchChatUserConversation), fork(fetchChatUser)]);\n}"]},"metadata":{},"sourceType":"module"}