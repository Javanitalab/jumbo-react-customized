{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { auth // facebookAuthProvider,\n// githubAuthProvider,\n// googleAuthProvider,\n// twitterAuthProvider,\n} from \"../firebase/firebase\";\nimport { // SIGNIN_FACEBOOK_USER,\n// SIGNIN_GITHUB_USER,\n// SIGNIN_GOOGLE_USER,\n// SIGNIN_TWITTER_USER,\nSIGNIN_USER, SIGNOUT_USER, SIGNUP_USER } from \"constants/ActionTypes\";\nimport { showAuthMessage, userSignInSuccess, userSignOutSuccess, userSignUpSuccess } from \"actions/Auth\";\nimport { signIn } from \"../api/AuthApi\"; // import {\n//   userFacebookSignInSuccess,\n//   userGithubSignInSuccess,\n//   userGoogleSignInSuccess,\n//   userTwitterSignInSuccess,\n// } from \"../actions/Auth\";\n\nconst createUserWithEmailPasswordRequest = async (email, password) => await auth.createUserWithEmailAndPassword(email, password).then(authUser => authUser).catch(error => error);\n\nconst signInUserWithEmailPasswordRequest = async (email, password) => await auth.signInWithEmailAndPassword(email, password).then(authUser => authUser).catch(error => error);\n\nconst signOutRequest = async () => await auth.signOut().then(authUser => authUser).catch(error => error); // const signInUserWithGoogleRequest = async () =>\n//   await auth\n//     .signInWithPopup(googleAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n// const signInUserWithFacebookRequest = async () =>\n//   await auth\n//     .signInWithPopup(facebookAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n// const signInUserWithGithubRequest = async () =>\n//   await auth\n//     .signInWithPopup(githubAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n// const signInUserWithTwitterRequest = async () =>\n//   await auth\n//     .signInWithPopup(twitterAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n\n\nfunction* createUserWithEmailPassword({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n\n  try {\n    const signUpUser = yield call(createUserWithEmailPasswordRequest, email, password);\n\n    if (signUpUser.message) {\n      yield put(showAuthMessage(signUpUser.message));\n    } else {\n      localStorage.setItem(\"user_id\", signUpUser.user.uid);\n      yield put(userSignUpSuccess(signUpUser.user.uid));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n} // function* signInUserWithGoogle() {\n//   try {\n//     const signUpUser = yield call(signInUserWithGoogleRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userGoogleSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n// function* signInUserWithFacebook() {\n//   try {\n//     const signUpUser = yield call(signInUserWithFacebookRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userFacebookSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n// function* signInUserWithGithub() {\n//   try {\n//     const signUpUser = yield call(signInUserWithGithubRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userGithubSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n// function* signInUserWithTwitter() {\n//   try {\n//     const signUpUser = yield call(signInUserWithTwitterRequest);\n//     if (signUpUser.message) {\n//       if (signUpUser.message.length > 100) {\n//         yield put(showAuthMessage('Your request has been canceled.'));\n//       } else {\n//         yield put(showAuthMessage(signUpUser.message));\n//       }\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userTwitterSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n\n\nfunction* signInUserWithEmailPassword({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n\n  try {\n    const signInUser = yield call(signInUserWithEmailPasswordRequest, email, password);\n\n    if (signInUser.message) {\n      yield put(showAuthMessage(signInUser.message));\n    } else {\n      localStorage.setItem(\"user_id\", signInUser.user.uid);\n      yield put(userSignInSuccess(signInUser.user.uid));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n}\n\nfunction* signOut() {\n  try {\n    const signOutUser = yield call(signOutRequest);\n\n    if (signOutUser === undefined) {\n      localStorage.removeItem(\"user_id\");\n      yield put(userSignOutSuccess(signOutUser));\n    } else {\n      yield put(showAuthMessage(signOutUser.message));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n}\n\nexport function* createUserAccount() {\n  yield takeEvery(SIGNUP_USER, createUserWithEmailPassword);\n} // export function* signInWithGoogle() {\n//   yield takeEvery(SIGNIN_GOOGLE_USER, signInUserWithGoogle);\n// }\n// export function* signInWithFacebook() {\n//   yield takeEvery(SIGNIN_FACEBOOK_USER, signInUserWithFacebook);\n// }\n// export function* signInWithTwitter() {\n//   yield takeEvery(SIGNIN_TWITTER_USER, signInUserWithTwitter);\n// }\n// export function* signInWithGithub() {\n//   yield takeEvery(SIGNIN_GITHUB_USER, signInUserWithGithub);\n// }\n\nexport function* signInUser() {\n  yield takeEvery(SIGNIN_USER, signInUserWithEmailPassword);\n}\nexport function* signOutUser() {\n  yield takeEvery(SIGNOUT_USER, signOut);\n}\nexport default function* rootSaga() {\n  yield all([fork(signInUser), fork(createUserAccount), // fork(signInWithGoogle),\n  // fork(signInWithFacebook),\n  // fork(signInWithTwitter),\n  // fork(signInWithGithub),\n  fork(signOutUser)]);\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Auth.js"],"names":["all","call","fork","put","takeEvery","auth","SIGNIN_USER","SIGNOUT_USER","SIGNUP_USER","showAuthMessage","userSignInSuccess","userSignOutSuccess","userSignUpSuccess","signIn","createUserWithEmailPasswordRequest","email","password","createUserWithEmailAndPassword","then","authUser","catch","error","signInUserWithEmailPasswordRequest","signInWithEmailAndPassword","signOutRequest","signOut","createUserWithEmailPassword","payload","signUpUser","message","localStorage","setItem","user","uid","signInUserWithEmailPassword","signInUser","signOutUser","undefined","removeItem","createUserAccount","rootSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport {\n  auth,\n  // facebookAuthProvider,\n  // githubAuthProvider,\n  // googleAuthProvider,\n  // twitterAuthProvider,\n} from \"../firebase/firebase\";\nimport {\n  // SIGNIN_FACEBOOK_USER,\n  // SIGNIN_GITHUB_USER,\n  // SIGNIN_GOOGLE_USER,\n  // SIGNIN_TWITTER_USER,\n  SIGNIN_USER,\n  SIGNOUT_USER,\n  SIGNUP_USER,\n} from \"constants/ActionTypes\";\nimport {\n  showAuthMessage,\n  userSignInSuccess,\n  userSignOutSuccess,\n  userSignUpSuccess,\n} from \"actions/Auth\";\nimport { signIn } from \"../api/AuthApi\";\n// import {\n//   userFacebookSignInSuccess,\n//   userGithubSignInSuccess,\n//   userGoogleSignInSuccess,\n//   userTwitterSignInSuccess,\n// } from \"../actions/Auth\";\n\nconst createUserWithEmailPasswordRequest = async (email, password) =>\n  await auth\n    .createUserWithEmailAndPassword(email, password)\n    .then((authUser) => authUser)\n    .catch((error) => error);\n\nconst signInUserWithEmailPasswordRequest = async (email, password) =>\n  await auth\n    .signInWithEmailAndPassword(email, password)\n    .then((authUser) => authUser)\n    .catch((error) => error);\n\nconst signOutRequest = async () =>\n  await auth\n    .signOut()\n    .then((authUser) => authUser)\n    .catch((error) => error);\n\n// const signInUserWithGoogleRequest = async () =>\n//   await auth\n//     .signInWithPopup(googleAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n\n// const signInUserWithFacebookRequest = async () =>\n//   await auth\n//     .signInWithPopup(facebookAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n\n// const signInUserWithGithubRequest = async () =>\n//   await auth\n//     .signInWithPopup(githubAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n\n// const signInUserWithTwitterRequest = async () =>\n//   await auth\n//     .signInWithPopup(twitterAuthProvider)\n//     .then((authUser) => authUser)\n//     .catch((error) => error);\n\nfunction* createUserWithEmailPassword({ payload }) {\n  const { email, password } = payload;\n  try {\n    const signUpUser = yield call(\n      createUserWithEmailPasswordRequest,\n      email,\n      password\n    );\n    if (signUpUser.message) {\n      yield put(showAuthMessage(signUpUser.message));\n    } else {\n      localStorage.setItem(\"user_id\", signUpUser.user.uid);\n      yield put(userSignUpSuccess(signUpUser.user.uid));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n}\n\n// function* signInUserWithGoogle() {\n//   try {\n//     const signUpUser = yield call(signInUserWithGoogleRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userGoogleSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n\n// function* signInUserWithFacebook() {\n//   try {\n//     const signUpUser = yield call(signInUserWithFacebookRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userFacebookSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n\n// function* signInUserWithGithub() {\n//   try {\n//     const signUpUser = yield call(signInUserWithGithubRequest);\n//     if (signUpUser.message) {\n//       yield put(showAuthMessage(signUpUser.message));\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userGithubSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n\n// function* signInUserWithTwitter() {\n//   try {\n//     const signUpUser = yield call(signInUserWithTwitterRequest);\n//     if (signUpUser.message) {\n//       if (signUpUser.message.length > 100) {\n//         yield put(showAuthMessage('Your request has been canceled.'));\n//       } else {\n//         yield put(showAuthMessage(signUpUser.message));\n//       }\n//     } else {\n//       localStorage.setItem('user_id', signUpUser.user.uid);\n//       yield put(userTwitterSignInSuccess(signUpUser.user.uid));\n//     }\n//   } catch (error) {\n//     yield put(showAuthMessage(error));\n//   }\n// }\n\nfunction* signInUserWithEmailPassword({ payload }) {\n  const { email, password } = payload;\n  try {\n    const signInUser = yield call(\n      signInUserWithEmailPasswordRequest,\n      email,\n      password\n    );\n    if (signInUser.message) {\n      yield put(showAuthMessage(signInUser.message));\n    } else {\n      localStorage.setItem(\"user_id\", signInUser.user.uid);\n      yield put(userSignInSuccess(signInUser.user.uid));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n}\n\nfunction* signOut() {\n  try {\n    const signOutUser = yield call(signOutRequest);\n    if (signOutUser === undefined) {\n      localStorage.removeItem(\"user_id\");\n      yield put(userSignOutSuccess(signOutUser));\n    } else {\n      yield put(showAuthMessage(signOutUser.message));\n    }\n  } catch (error) {\n    yield put(showAuthMessage(error));\n  }\n}\n\nexport function* createUserAccount() {\n  yield takeEvery(SIGNUP_USER, createUserWithEmailPassword);\n}\n\n// export function* signInWithGoogle() {\n//   yield takeEvery(SIGNIN_GOOGLE_USER, signInUserWithGoogle);\n// }\n\n// export function* signInWithFacebook() {\n//   yield takeEvery(SIGNIN_FACEBOOK_USER, signInUserWithFacebook);\n// }\n\n// export function* signInWithTwitter() {\n//   yield takeEvery(SIGNIN_TWITTER_USER, signInUserWithTwitter);\n// }\n\n// export function* signInWithGithub() {\n//   yield takeEvery(SIGNIN_GITHUB_USER, signInUserWithGithub);\n// }\n\nexport function* signInUser() {\n  yield takeEvery(SIGNIN_USER, signInUserWithEmailPassword);\n}\n\nexport function* signOutUser() {\n  yield takeEvery(SIGNOUT_USER, signOut);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(signInUser),\n    fork(createUserAccount),\n    // fork(signInWithGoogle),\n    // fork(signInWithFacebook),\n    // fork(signInWithTwitter),\n    // fork(signInWithGithub),\n    fork(signOutUser),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}