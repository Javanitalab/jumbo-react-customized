{"ast":null,"code":"import React from'react';import{Area,AreaChart,CartesianGrid,ResponsiveContainer,Tooltip,XAxis,YAxis}from'recharts';var data=[{month:'2015.01',a:4000,b:2400,c:2400},{month:'2015.02',a:3000,b:1398,c:2210},{month:'2015.03',a:2000,b:9800,c:2290},{month:'2015.04',a:2780,b:3908,c:2000},{month:'2015.05',a:1890,b:4800,c:2181},{month:'2015.06',a:2390,b:3800,c:2500},{month:'2015.07',a:3490,b:4300,c:2100}];var getPercent=function getPercent(value,total){var ratio=total>0?value/total:0;return toPercent(ratio,2);};var toPercent=function toPercent(decimal){var fixed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return\"\".concat((decimal*100).toFixed(fixed),\"%\");};var renderTooltipContent=function renderTooltipContent(o){var payload=o.payload,label=o.label;var total=payload.reduce(function(result,entry){return result+entry.value;},0);return React.createElement(\"div\",{className:\"customized-tooltip-content\"},React.createElement(\"p\",{className:\"total\"},\"\".concat(label,\" (Total: \").concat(total,\")\")),React.createElement(\"ul\",{className:\"list\"},payload.map(function(entry,index){return React.createElement(\"li\",{key:\"item-\".concat(index),style:{color:entry.color}},\"\".concat(entry.name,\": \").concat(entry.value,\"(\").concat(getPercent(entry.value,total),\")\"));})));};var PercentAreaChart=function PercentAreaChart(){return React.createElement(ResponsiveContainer,{width:\"100%\",height:200},React.createElement(AreaChart,{data:data,stackOffset:\"expand\",margin:{top:10,right:0,left:-25,bottom:0}},React.createElement(XAxis,{dataKey:\"month\"}),React.createElement(YAxis,{tickFormatter:toPercent}),React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),React.createElement(Tooltip,{content:renderTooltipContent}),React.createElement(Area,{type:\"monotone\",dataKey:\"a\",stackId:\"1\",stroke:\"#3367d6\",fill:\"#3367d6\"}),React.createElement(Area,{type:\"monotone\",dataKey:\"b\",stackId:\"1\",stroke:\"#59AA2B\",fill:\"#59AA2B\"}),React.createElement(Area,{type:\"monotone\",dataKey:\"c\",stackId:\"1\",stroke:\"#ffc658\",fill:\"#ffc658\"})));};export default PercentAreaChart;","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/charts/routes/area/Components/PercentAreaChart.js"],"names":["React","Area","AreaChart","CartesianGrid","ResponsiveContainer","Tooltip","XAxis","YAxis","data","month","a","b","c","getPercent","value","total","ratio","toPercent","decimal","fixed","toFixed","renderTooltipContent","o","payload","label","reduce","result","entry","map","index","color","name","PercentAreaChart","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\n\nconst data = [\n  {month: '2015.01', a: 4000, b: 2400, c: 2400},\n  {month: '2015.02', a: 3000, b: 1398, c: 2210},\n  {month: '2015.03', a: 2000, b: 9800, c: 2290},\n  {month: '2015.04', a: 2780, b: 3908, c: 2000},\n  {month: '2015.05', a: 1890, b: 4800, c: 2181},\n  {month: '2015.06', a: 2390, b: 3800, c: 2500},\n  {month: '2015.07', a: 3490, b: 4300, c: 2100},\n];\n\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = (decimal, fixed = 0) => {\n  return `${(decimal * 100).toFixed(fixed)}%`;\n};\nconst renderTooltipContent = (o) => {\n  const {payload, label} = o;\n  const total = payload.reduce((result, entry) => (result + entry.value), 0);\n\n  return (\n    <div className=\"customized-tooltip-content\">\n      <p className=\"total\">{`${label} (Total: ${total})`}</p>\n      <ul className=\"list\">\n        {\n          payload.map((entry, index) => (\n            <li key={`item-${index}`} style={{color: entry.color}}>\n              {`${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\nconst PercentAreaChart = () => (\n  <ResponsiveContainer width=\"100%\" height={200}>\n    <AreaChart data={data} stackOffset=\"expand\"\n               margin={{top: 10, right: 0, left: -25, bottom: 0}}>\n      <XAxis dataKey=\"month\"/>\n      <YAxis tickFormatter={toPercent}/>\n      <CartesianGrid strokeDasharray=\"3 3\"/>\n      <Tooltip content={renderTooltipContent}/>\n      <Area type='monotone' dataKey='a' stackId=\"1\" stroke='#3367d6' fill='#3367d6'/>\n      <Area type='monotone' dataKey='b' stackId=\"1\" stroke='#59AA2B' fill='#59AA2B'/>\n      <Area type='monotone' dataKey='c' stackId=\"1\" stroke='#ffc658' fill='#ffc658'/>\n    </AreaChart>\n  </ResponsiveContainer>\n);\n\nexport default PercentAreaChart;"]},"metadata":{},"sourceType":"module"}