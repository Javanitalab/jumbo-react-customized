{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { fetchTodosConversationSuccess, fetchTodosSuccess, showTodoMessage } from 'actions/ToDo';\nimport { database } from '../firebase/firebase';\nimport { FETCH_ALL_TODO, FETCH_ALL_TODO_CONVERSATION } from 'constants/ActionTypes';\n\nconst getTodos = async () => await database.ref('prod/todo/todos').once('value').then(snapshot => {\n  const todos = [];\n  snapshot.forEach(rawData => {\n    const todo = rawData.val(); // change object to array\n\n    const labels = [];\n\n    if (todo.labels) {\n      todo.labels.forEach(label => labels.push(label));\n    }\n\n    todo.labels = labels;\n    todos.push(todo);\n  });\n  return todos;\n}).catch(error => error);\n\nconst getTodosConversation = async () => await database.ref('prod/todo/conversation').once('value').then(snapshot => {\n  const conversations = [];\n  snapshot.forEach(rawData => {\n    const conversation = rawData.val(); // change object to array\n\n    const conversationDatas = [];\n\n    if (conversation.conversationData) {\n      conversation.conversationData.forEach(conversationData => conversationDatas.push(conversationData));\n    }\n\n    conversation.conversationData = conversationDatas;\n    conversations.push(conversation);\n  });\n  return conversations;\n}).catch(error => error);\n\nfunction* fetchTodoRequest() {\n  try {\n    const fetchedTodo = yield call(getTodos);\n    yield put(fetchTodosSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nfunction* fetchTodoConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getTodosConversation);\n    yield put(fetchTodosConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nexport function* fetchTodos() {\n  yield takeEvery(FETCH_ALL_TODO, fetchTodoRequest);\n}\nexport function* fetchTodoConversation() {\n  yield takeEvery(FETCH_ALL_TODO_CONVERSATION, fetchTodoConversationRequest);\n}\nexport default function* rootSaga() {\n  yield all([fork(fetchTodoConversation), fork(fetchTodos)]);\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/sagas/Todo.js"],"names":["all","call","fork","put","takeEvery","fetchTodosConversationSuccess","fetchTodosSuccess","showTodoMessage","database","FETCH_ALL_TODO","FETCH_ALL_TODO_CONVERSATION","getTodos","ref","once","then","snapshot","todos","forEach","rawData","todo","val","labels","label","push","catch","error","getTodosConversation","conversations","conversation","conversationDatas","conversationData","fetchTodoRequest","fetchedTodo","fetchTodoConversationRequest","fetchedTodoConversation","fetchTodos","fetchTodoConversation","rootSaga"],"mappings":"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","sourcesContent":["import {all, call, fork, put, takeEvery} from 'redux-saga/effects';\nimport {fetchTodosConversationSuccess, fetchTodosSuccess, showTodoMessage} from 'actions/ToDo';\nimport {database} from '../firebase/firebase';\nimport {FETCH_ALL_TODO, FETCH_ALL_TODO_CONVERSATION} from 'constants/ActionTypes';\n\nconst getTodos = async () =>\n  await database.ref('prod/todo/todos').once('value')\n    .then((snapshot) => {\n      const todos = [];\n      snapshot.forEach((rawData) => {\n        const todo = rawData.val();\n\n        // change object to array\n        const labels = [];\n        if (todo.labels) {\n          todo.labels.forEach((label) =>\n            labels.push(label)\n          );\n        }\n\n        todo.labels = labels;\n        todos.push(todo);\n      });\n      return todos;\n    })\n    .catch(error => error);\n\nconst getTodosConversation = async () =>\n  await database.ref('prod/todo/conversation').once('value')\n    .then((snapshot) => {\n      const conversations = [];\n      snapshot.forEach((rawData) => {\n        const conversation = rawData.val();\n\n        // change object to array\n        const conversationDatas = [];\n        if (conversation.conversationData) {\n          conversation.conversationData.forEach((conversationData) =>\n            conversationDatas.push(conversationData)\n          );\n        }\n        conversation.conversationData = conversationDatas;\n        conversations.push(conversation);\n      });\n\n      return conversations;\n    })\n    .catch(error => error);\n\n\nfunction* fetchTodoRequest() {\n  try {\n    const fetchedTodo = yield call(getTodos);\n    yield put(fetchTodosSuccess(fetchedTodo));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nfunction* fetchTodoConversationRequest() {\n  try {\n    const fetchedTodoConversation = yield call(getTodosConversation);\n    yield put(fetchTodosConversationSuccess(fetchedTodoConversation));\n  } catch (error) {\n    yield put(showTodoMessage(error));\n  }\n}\n\nexport function* fetchTodos() {\n  yield takeEvery(FETCH_ALL_TODO, fetchTodoRequest);\n}\n\nexport function* fetchTodoConversation() {\n  yield takeEvery(FETCH_ALL_TODO_CONVERSATION, fetchTodoConversationRequest);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(fetchTodoConversation), fork(fetchTodos)]);\n}"]},"metadata":{},"sourceType":"module"}