{"ast":null,"code":"var _jsxFileName = \"/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/map/routes/geoLocation/Components/GeoLocation.js\";\nimport React, { Component } from \"react\";\nimport { Circle, GoogleMap, InfoWindow, withGoogleMap } from \"react-google-maps\";\nimport canUseDOM from \"can-use-dom\";\nimport raf from \"raf\";\nconst geolocation = canUseDOM && navigator.geolocation ? navigator.geolocation : {\n  getCurrentPosition(success, failure) {\n    failure(`Your browser doesn't support geolocation.`);\n  }\n\n};\nconst GeolocationExampleGoogleMap = withGoogleMap(props => React.createElement(GoogleMap, {\n  defaultZoom: 10,\n  center: props.center,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.center && React.createElement(InfoWindow, {\n  position: props.center,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, props.content)), props.center && React.createElement(Circle, {\n  center: props.center,\n  radius: props.radius,\n  options: {\n    fillColor: 'red',\n    fillOpacity: 0.20,\n    strokeColor: 'red',\n    strokeOpacity: 1,\n    strokeWeight: 1\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n})));\n/*\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\n *\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\n */\n\nexport default class GeolocationExample extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      center: null,\n      content: null,\n      radius: 6000\n    };\n    this.isUnmounted = false;\n  }\n\n  componentDidMount() {\n    const tick = () => {\n      if (this.isUnmounted) {\n        return;\n      }\n\n      this.setState({\n        radius: Math.max(this.state.radius - 20, 0)\n      });\n\n      if (this.state.radius > 200) {\n        raf(tick);\n      }\n    };\n\n    geolocation.getCurrentPosition(position => {\n      if (this.isUnmounted) {\n        return;\n      }\n\n      this.setState({\n        center: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        content: `Location found using HTML5.`\n      });\n      raf(tick);\n    }, reason => {\n      if (this.isUnmounted) {\n        return;\n      }\n\n      this.setState({\n        center: {\n          lat: 60,\n          lng: 105\n        },\n        content: `Error: The Geolocation service failed (${reason}).`\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  render() {\n    return React.createElement(GeolocationExampleGoogleMap, {\n      containerElement: React.createElement(\"div\", {\n        className: \"embed-responsive embed-responsive-21by9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        className: \"embed-responsive-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }),\n      center: this.state.center,\n      content: this.state.content,\n      radius: this.state.radius,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/mohammad/Documents/SimpleApp/jumbo-react-source/src/app/routes/map/routes/geoLocation/Components/GeoLocation.js"],"names":["React","Component","Circle","GoogleMap","InfoWindow","withGoogleMap","canUseDOM","raf","geolocation","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","props","center","content","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","componentDidMount","tick","setState","Math","max","position","lat","coords","latitude","lng","longitude","reason","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,aAAvC,QAA2D,mBAA3D;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,MAAMC,WAAW,GACfF,SAAS,IAAIG,SAAS,CAACD,WAAvB,GACEC,SAAS,CAACD,WADZ,GAEG;AACCE,EAAAA,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACnCA,IAAAA,OAAO,CAAE,2CAAF,CAAP;AACD;;AAHF,CAHL;AAUA,MAAMC,2BAA2B,GAAGR,aAAa,CAACS,KAAK,IACrD,oBAAC,SAAD;AACE,EAAA,WAAW,EAAE,EADf;AAEE,EAAA,MAAM,EAAEA,KAAK,CAACC,MAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAIGD,KAAK,CAACC,MAAN,IACC,oBAAC,UAAD;AAAY,EAAA,QAAQ,EAAED,KAAK,CAACC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMD,KAAK,CAACE,OAAZ,CADF,CALJ,EASGF,KAAK,CAACC,MAAN,IACC,oBAAC,MAAD;AACE,EAAA,MAAM,EAAED,KAAK,CAACC,MADhB;AAEE,EAAA,MAAM,EAAED,KAAK,CAACG,MAFhB;AAGE,EAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,KADJ;AAEPC,IAAAA,WAAW,EAAE,IAFN;AAGPC,IAAAA,WAAW,EAAE,KAHN;AAIPC,IAAAA,aAAa,EAAE,CAJR;AAKPC,IAAAA,YAAY,EAAE;AALP,GAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAVJ,CAD+C,CAAjD;AA0BA;;;;;;AAKA,eAAe,MAAMC,kBAAN,SAAiCtB,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAExDuB,KAFwD,GAEhD;AACNT,MAAAA,MAAM,EAAE,IADF;AAENC,MAAAA,OAAO,EAAE,IAFH;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAFgD;AAAA,SAQxDQ,WARwD,GAQ1C,KAR0C;AAAA;;AAUxDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,IAAI,GAAG,MAAM;AACjB,UAAI,KAAKF,WAAT,EAAsB;AACpB;AACD;;AACD,WAAKG,QAAL,CAAc;AAACX,QAAAA,MAAM,EAAEY,IAAI,CAACC,GAAL,CAAS,KAAKN,KAAL,CAAWP,MAAX,GAAoB,EAA7B,EAAiC,CAAjC;AAAT,OAAd;;AAEA,UAAI,KAAKO,KAAL,CAAWP,MAAX,GAAoB,GAAxB,EAA6B;AAC3BV,QAAAA,GAAG,CAACoB,IAAD,CAAH;AACD;AACF,KATD;;AAUAnB,IAAAA,WAAW,CAACE,kBAAZ,CAAgCqB,QAAD,IAAc;AAC3C,UAAI,KAAKN,WAAT,EAAsB;AACpB;AACD;;AACD,WAAKG,QAAL,CAAc;AACZb,QAAAA,MAAM,EAAE;AACNiB,UAAAA,GAAG,EAAED,QAAQ,CAACE,MAAT,CAAgBC,QADf;AAENC,UAAAA,GAAG,EAAEJ,QAAQ,CAACE,MAAT,CAAgBG;AAFf,SADI;AAKZpB,QAAAA,OAAO,EAAG;AALE,OAAd;AAQAT,MAAAA,GAAG,CAACoB,IAAD,CAAH;AACD,KAbD,EAaIU,MAAD,IAAY;AACb,UAAI,KAAKZ,WAAT,EAAsB;AACpB;AACD;;AACD,WAAKG,QAAL,CAAc;AACZb,QAAAA,MAAM,EAAE;AACNiB,UAAAA,GAAG,EAAE,EADC;AAENG,UAAAA,GAAG,EAAE;AAFC,SADI;AAKZnB,QAAAA,OAAO,EAAG,0CAAyCqB,MAAO;AAL9C,OAAd;AAOD,KAxBD;AAyBD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,WAAL,GAAmB,IAAnB;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,2BAAD;AACE,MAAA,gBAAgB,EACd;AAAK,QAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAIE,MAAA,UAAU,EAAE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJd;AAKE,MAAA,MAAM,EAAE,KAAKf,KAAL,CAAWT,MALrB;AAME,MAAA,OAAO,EAAE,KAAKS,KAAL,CAAWR,OANtB;AAOE,MAAA,MAAM,EAAE,KAAKQ,KAAL,CAAWP,MAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AAhEuD","sourcesContent":["import React, {Component} from \"react\";\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from \"react-google-maps\";\nimport canUseDOM from \"can-use-dom\";\nimport raf from \"raf\";\n\nconst geolocation = (\n  canUseDOM && navigator.geolocation ?\n    navigator.geolocation :\n    ({\n      getCurrentPosition(success, failure) {\n        failure(`Your browser doesn't support geolocation.`);\n      },\n    })\n);\n\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\n  <GoogleMap\n    defaultZoom={10}\n    center={props.center}\n  >\n    {props.center && (\n      <InfoWindow position={props.center}>\n        <div>{props.content}</div>\n      </InfoWindow>\n    )}\n    {props.center && (\n      <Circle\n        center={props.center}\n        radius={props.radius}\n        options={{\n          fillColor: 'red',\n          fillOpacity: 0.20,\n          strokeColor: 'red',\n          strokeOpacity: 1,\n          strokeWeight: 1,\n        }}\n      />\n    )}\n  </GoogleMap>\n));\n\n/*\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\n *\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\n */\nexport default class GeolocationExample extends Component {\n\n  state = {\n    center: null,\n    content: null,\n    radius: 6000,\n  };\n\n  isUnmounted = false;\n\n  componentDidMount() {\n    const tick = () => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\n\n      if (this.state.radius > 200) {\n        raf(tick);\n      }\n    };\n    geolocation.getCurrentPosition((position) => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({\n        center: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        },\n        content: `Location found using HTML5.`,\n      });\n\n      raf(tick);\n    }, (reason) => {\n      if (this.isUnmounted) {\n        return;\n      }\n      this.setState({\n        center: {\n          lat: 60,\n          lng: 105,\n        },\n        content: `Error: The Geolocation service failed (${reason}).`,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  render() {\n    return (\n      <GeolocationExampleGoogleMap\n        containerElement={\n          <div className=\"embed-responsive embed-responsive-21by9\"/>\n        }\n        mapElement={<div className=\"embed-responsive-item\"/>}\n        center={this.state.center}\n        content={this.state.content}\n        radius={this.state.radius}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}